{"version":3,"sources":["webpack:///component---src-pages-techniques-programming-pandas-verbs-pipe-js-1a422fa6434bd009d3b1.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_movies.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_pipe1.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_pipe2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/pipe.js"],"names":["webpackJsonp","114","module","exports","456","457","282","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_propTypes","_components","PipeVerb","_Component","props","this","render","createElement","Section","name","Paragraph","note","href","className","RawHTML","Subsection","Code","language","code","Component"],"mappings":"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","file":"component---src-pages-techniques-programming-pandas-verbs-pipe-js-1a422fa6434bd009d3b1.js","sourcesContent":["webpackJsonp([159481207458299],{\n\n/***/ 114:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>year</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 456:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>date</th> <th>yr</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009-12-10</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007-05-19</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015-10-26</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012-07-16</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012-03-07</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 457:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>date</th> <th>month</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009-12-10</td> <td>12.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007-05-19</td> <td>5.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015-10-26</td> <td>10.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012-07-16</td> <td>7.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012-03-07</td> <td>3.0</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 282:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(7);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _components = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar PipeVerb = function (_Component) {\n\t  _inherits(PipeVerb, _Component);\n\t\n\t  function PipeVerb(props) {\n\t    _classCallCheck(this, PipeVerb);\n\t\n\t    return _possibleConstructorReturn(this, _Component.call(this, props));\n\t  }\n\t\n\t  PipeVerb.prototype.render = function render() {\n\t    return Glamor.createElement(\n\t      _components.Section,\n\t      { name: 'pipe' },\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        'All the other data verbs we\\'ve been using are functions that are part of the dataframe class. That set of verbs is very comprehensive, and covers most use cases. The ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'pipe'\n\t        ),\n\t        ' operation is a way for us to be more flexible, and perform any operation as a data verb. It applies the function to the dataframe, returning whatever the function returns.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://gist.github.com/dataewan/9e3eb3fee268b1eb4a629fd216e20712' },\n\t            'where the data comes from'\n\t          ) },\n\t        'I\\'ll be using the movies dataframe. Here\\'s a sample of that data.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.RawHTML,\n\t        null,\n\t        __webpack_require__(114)\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Arbitrary operations, making your own verbs' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'You can make your own functions that work like verbs. These take a dataframe and return a copy of that dataframe with some changes applied. Here I\\'m making two functions, one that converts a string formatted date to a pandas date, and a second one that extracts the year from that date.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\ndef convert_date(x):\\n    return (\\n        x\\n        .assign(date = pd.to_datetime(x.release_date))\\n    )\\n\\ndef extract_year(x):\\n    return (\\n        x\\n        .assign(yr = x.date.dt.year)\\n    )\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'Instead of having to apply these functions like this:'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\nextract_year(convert_date(movies))\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'I can use them in a chain like this:'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    movies\\n    .pipe(convert_date)\\n    .pipe(extract_year)\\n)\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'This gives the same result, but is nicer pandas code.'\n\t        ),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(456)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Working with a mutated dataframe' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'This is a specific use case of making your own verb, but is a very useful case. If you are making a chain that mutates the dataframe somehow, let\\'s say that we\\'re making a new column. If we want to use that new column in subsequent steps pandas will say that it can\\'t find it. Here I\\'m making a new date column, which I want to take the month from.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    movies\\n    .assign(date = pd.to_datetime(movies.release_date))\\n    .assign(month = movies.date.dt.month)\\n)\\n# Fails with AttributeError: \\'DataFrame\\' object has no attribute \\'date\\'\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'If I\\'d been mutating in-place in the dataframe (assigning the new values to the release_date column), then the second row would try and work with the original column and not the mutated one. That can cause some tricky bugs.'\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'Instead we can use the pipe function to get access to the mutated columns in subsequent stages of the chain. I\\'m using ',\n\t          Glamor.createElement(\n\t            'a',\n\t            { href: 'https://dbader.org/blog/python-lambda-functions' },\n\t            'lambda functions'\n\t          ),\n\t          ' here because I don\\'t intend to use them again.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    movies\\n    .pipe(lambda x: x.assign(date = pd.to_datetime(x.release_date)))\\n    .pipe(lambda x: x.assign(month = x.date.dt.month))\\n)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'This gives the intended result.'\n\t        ),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(457)\n\t        )\n\t      )\n\t    );\n\t  };\n\t\n\t  return PipeVerb;\n\t}(_react.Component);\n\t\n\texports.default = PipeVerb;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-techniques-programming-pandas-verbs-pipe-js-1a422fa6434bd009d3b1.js","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>year</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_movies.html\n// module id = 114\n// module chunks = 159481207458299 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>date</th> <th>yr</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009-12-10</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007-05-19</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015-10-26</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012-07-16</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012-03-07</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_pipe1.html\n// module id = 456\n// module chunks = 159481207458299","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>date</th> <th>month</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009-12-10</td> <td>12.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007-05-19</td> <td>5.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015-10-26</td> <td>10.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012-07-16</td> <td>7.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012-03-07</td> <td>3.0</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_pipe2.html\n// module id = 457\n// module chunks = 159481207458299","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Section, Subsection, Paragraph, Code, RawHTML\n} from '../../../../../components';\n\nclass PipeVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Section name=\"pipe\">\n        <Paragraph note={<a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html'>pandas documentation</a>}>\n          All the other data verbs we've been using are functions that are part of the dataframe class.\n          That set of verbs is very comprehensive, and covers most use cases.\n          The <span className=\"mono\">pipe</span> operation is a way for us to be more flexible,\n          and perform any operation as a data verb.\n          It applies the function to the dataframe, returning whatever the function returns.\n        </Paragraph>\n        <Paragraph note={<a href=\"https://gist.github.com/dataewan/9e3eb3fee268b1eb4a629fd216e20712\">where the data comes from</a>}>\n          I'll be using the movies dataframe.\n          Here's a sample of that data.\n        </Paragraph>\n          <RawHTML >\n            {require('./_movies.html')}\n          </RawHTML>\n        <Subsection name=\"Arbitrary operations, making your own verbs\">\n          <Paragraph>\n            You can make your own functions that work like verbs.\n            These take a dataframe and return a copy of that dataframe with some changes applied.\n            Here I'm making two functions,\n            one that converts a string formatted date to a pandas date,\n            and a second one that extracts the year from that date. \n          </Paragraph>\n        <Code language='python' code={`\ndef convert_date(x):\n    return (\n        x\n        .assign(date = pd.to_datetime(x.release_date))\n    )\n\ndef extract_year(x):\n    return (\n        x\n        .assign(yr = x.date.dt.year)\n    )\n          `} />\n        <Paragraph>\n          Instead of having to apply these functions like this:\n        </Paragraph>\n        <Code language='python' code={`\nextract_year(convert_date(movies))\n        `} />\n        <Paragraph>\n          I can use them in a chain like this:\n        </Paragraph>\n        <Code language='python' code={`\n(\n    movies\n    .pipe(convert_date)\n    .pipe(extract_year)\n)\n        `} />\n          <Paragraph>\n            This gives the same result, but is nicer pandas code.\n          </Paragraph>\n          <RawHTML >\n            {require('./_pipe1.html')}\n          </RawHTML>\n        </Subsection>\n        <Subsection name=\"Working with a mutated dataframe\">\n          <Paragraph>\n            This is a specific use case of making your own verb,\n            but is a very useful case.\n            If you are making a chain that mutates the dataframe somehow,\n            let's say that we're making a new column.\n            If we want to use that new column in subsequent steps pandas will say that it can't find it.\n            Here I'm making a new date column, which I want to take the month from.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    movies\n    .assign(date = pd.to_datetime(movies.release_date))\n    .assign(month = movies.date.dt.month)\n)\n# Fails with AttributeError: 'DataFrame' object has no attribute 'date'\n          `} />\n          <Paragraph>\n            If I'd been mutating in-place in the dataframe (assigning the new values to the release_date column),\n            then the second row would try and work with the original column and not the mutated one.\n            That can cause some tricky bugs.\n          </Paragraph>\n          <Paragraph>\n            Instead we can use the pipe function to get access to the mutated columns in subsequent stages of the chain.\n            I'm using <a href=\"https://dbader.org/blog/python-lambda-functions\">lambda functions</a> here because I don't intend to use them again.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    movies\n    .pipe(lambda x: x.assign(date = pd.to_datetime(x.release_date)))\n    .pipe(lambda x: x.assign(month = x.date.dt.month))\n)\n          `} />\n          <Paragraph>\n            This gives the intended result.\n          </Paragraph>\n          <RawHTML >\n            {require('./_pipe2.html')}\n          </RawHTML>\n        </Subsection>\n      </Section>\n    );\n  }\n}\n\nexport default PipeVerb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/techniques/programming/pandas/verbs/pipe.js"],"sourceRoot":""}