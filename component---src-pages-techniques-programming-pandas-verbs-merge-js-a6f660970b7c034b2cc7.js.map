{"version":3,"sources":["webpack:///component---src-pages-techniques-programming-pandas-verbs-merge-js-a6f660970b7c034b2cc7.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_cast.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_crew.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge1.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_movies.html?15ac","webpack:///./src/pages/techniques/programming/pandas/verbs/merge.js"],"names":["webpackJsonp","444","module","exports","445","453","454","455","114","281","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_propTypes","_components","MergeVerb","_Component","props","this","render","createElement","Section","name","Paragraph","note","href","className","Figure","caption","fullwidth","RawHTML","Subsection","Code","language","code","Subsubsection","Component"],"mappings":"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","file":"component---src-pages-techniques-programming-pandas-verbs-merge-js-a6f660970b7c034b2cc7.js","sourcesContent":["webpackJsonp([187810446712651],{\n\n/***/ 444:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>cast_id</th> <th>character</th> <th>credit_id</th> <th>gender</th> <th>id</th> <th>movie_id</th> <th>name</th> <th>order</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>242</td> <td>Jake Sully</td> <td>5602a8a7c3a3685532001c9a</td> <td>2</td> <td>65731</td> <td>19995</td> <td>Sam Worthington</td> <td>0</td> </tr> <tr> <th>1</th> <td>3</td> <td>Neytiri</td> <td>52fe48009251416c750ac9cb</td> <td>1</td> <td>8691</td> <td>19995</td> <td>Zoe Saldana</td> <td>1</td> </tr> <tr> <th>2</th> <td>25</td> <td>Dr. Grace Augustine</td> <td>52fe48009251416c750aca39</td> <td>1</td> <td>10205</td> <td>19995</td> <td>Sigourney Weaver</td> <td>2</td> </tr> <tr> <th>3</th> <td>4</td> <td>Col. Quaritch</td> <td>52fe48009251416c750ac9cf</td> <td>2</td> <td>32747</td> <td>19995</td> <td>Stephen Lang</td> <td>3</td> </tr> <tr> <th>4</th> <td>5</td> <td>Trudy Chacon</td> <td>52fe48009251416c750ac9d3</td> <td>1</td> <td>17647</td> <td>19995</td> <td>Michelle Rodriguez</td> <td>4</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 445:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>credit_id</th> <th>department</th> <th>gender</th> <th>id</th> <th>job</th> <th>movie_id</th> <th>name</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>52fe48009251416c750aca23</td> <td>Editing</td> <td>0</td> <td>1721</td> <td>Editor</td> <td>19995</td> <td>Stephen E. Rivkin</td> </tr> <tr> <th>1</th> <td>539c47ecc3a36810e3001f87</td> <td>Art</td> <td>2</td> <td>496</td> <td>Production Design</td> <td>19995</td> <td>Rick Carter</td> </tr> <tr> <th>2</th> <td>54491c89c3a3680fb4001cf7</td> <td>Sound</td> <td>0</td> <td>900</td> <td>Sound Designer</td> <td>19995</td> <td>Christopher Boyes</td> </tr> <tr> <th>3</th> <td>54491cb70e0a267480001bd0</td> <td>Sound</td> <td>0</td> <td>900</td> <td>Supervising Sound Editor</td> <td>19995</td> <td>Christopher Boyes</td> </tr> <tr> <th>4</th> <td>539c4a4cc3a36810c9002101</td> <td>Production</td> <td>1</td> <td>1262</td> <td>Casting</td> <td>19995</td> <td>Mali Finn</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>title</th> <th>release_date</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>The Dark Knight Rises</td> <td>2012-07-16</td> </tr> <tr> <th>1</th> <td>The Dark Knight</td> <td>2008-07-16</td> </tr> <tr> <th>2</th> <td>Interstellar</td> <td>2014-11-05</td> </tr> <tr> <th>3</th> <td>Inception</td> <td>2010-07-14</td> </tr> <tr> <th>4</th> <td>Batman Begins</td> <td>2005-06-10</td> </tr> <tr> <th>5</th> <td>Insomnia</td> <td>2002-05-24</td> </tr> <tr> <th>6</th> <td>The Prestige</td> <td>2006-10-19</td> </tr> <tr> <th>7</th> <td>Memento</td> <td>2000-10-11</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 454:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>year</th> <th>name_x</th> <th>name_y</th> </tr> </thead> <tbody> <tr> <th>41</th> <td>1974.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>54</th> <td>1975.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>52</th> <td>1977.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>49</th> <td>1979.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>51</th> <td>1981.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>55</th> <td>1982.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>56</th> <td>1983.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>50</th> <td>1984.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>53</th> <td>1985.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>47</th> <td>1989.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>44</th> <td>1991.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>40</th> <td>1992.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>45</th> <td>1993.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>19</th> <td>1994.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>37</th> <td>1995.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>42</th> <td>1997.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>16</th> <td>1998.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>25</th> <td>1999.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>27</th> <td>2000.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>11</th> <td>2001.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>28</th> <td>2002.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>21</th> <td>2004.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>12</th> <td>2005.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>8</th> <td>2007.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>0</th> <td>2008.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>5</th> <td>2009.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>10</th> <td>2010.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>38</th> <td>2011.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>1</th> <td>2012.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>23</th> <td>2013.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>34</th> <td>2014.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>48</th> <td>2015.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>18</th> <td>2016.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 455:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>name</th> </tr> <tr> <th>title</th> <th></th> </tr> </thead> <tbody> <tr> <th>Bambi</th> <td>7</td> </tr> <tr> <th>Fantasia 2000</th> <td>8</td> </tr> <tr> <th>Fantasia</th> <td>12</td> </tr> <tr> <th>Movie 43</th> <td>12</td> </tr> <tr> <th>Paris, je t'aime</th> <td>21</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 114:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>year</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(7);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _components = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar MergeVerb = function (_Component) {\n\t  _inherits(MergeVerb, _Component);\n\t\n\t  function MergeVerb(props) {\n\t    _classCallCheck(this, MergeVerb);\n\t\n\t    return _possibleConstructorReturn(this, _Component.call(this, props));\n\t  }\n\t\n\t  MergeVerb.prototype.render = function render() {\n\t    return Glamor.createElement(\n\t      _components.Section,\n\t      { name: 'merge' },\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        'Merge is a lot like the ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'JOIN'\n\t        ),\n\t        ' operation in SQL. You use it to join together dataframe that contain a common key. The common key is a column in each dataframe that you can use to look up between the dataframes, some sort of identifier.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://gist.github.com/dataewan/9e3eb3fee268b1eb4a629fd216e20712' },\n\t            'where the data comes from'\n\t          ) },\n\t        'I\\'m going to use three dataframes for this that contain information about movies. There are dataframes named ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'movies'\n\t        ),\n\t        ', ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'cast'\n\t        ),\n\t        ', and ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'crew'\n\t        ),\n\t        '.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Figure,\n\t        { caption: 'Movies dataframe', fullwidth: true },\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(114)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Figure,\n\t        { caption: 'Cast dataframe', fullwidth: true },\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(444)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Figure,\n\t        { caption: 'Crew dataframe', fullwidth: true },\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(445)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        null,\n\t        'Note that there is an ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'id'\n\t        ),\n\t        ' column in the movies dataframe. This matches the ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'movie_id'\n\t        ),\n\t        ' column in the cast and crew dataframes.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Joins in pandas' },\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    # first a subquery to get all the Christopher Nolan directed films\\n    crew\\n    .query(\\'job == \"Director\"\\')\\n    .query(\\'name == \"Christopher Nolan\"\\')\\n    # now join with the movies and get their titles\\n    .merge(\\n        movies,\\n        left_on=\\'movie_id\\',\\n        right_on=\\'id\\'\\n    )\\n    [[\\'title\\', \\'release_date\\']]\\n)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(453)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Subsubsection,\n\t          { name: 'left, right, inner, outer' },\n\t          Glamor.createElement(\n\t            _components.Paragraph,\n\t            null,\n\t            'By default pandas does an inner join. This means that only rows in both the dataframes are returned. The ',\n\t            Glamor.createElement(\n\t              'span',\n\t              { className: 'mono' },\n\t              'how'\n\t            ),\n\t            ' parameter lets you do different sorts of joins. This (slightly contrived) example returns any years that either Susan Sarandon or Steven Spielberg made a film. This is an outer join, because we want rows that are present in either.'\n\t          ),\n\t          Glamor.createElement(_components.Code, { language: 'python', code: '\\n# get all the susan sarandon movies\\nsarandon = (\\n    cast\\n    .query(\\'name == \"Susan Sarandon\"\\')\\n    .merge(movies,\\n           left_on=\\'movie_id\\',\\n           right_on=\\'id\\')\\n    [[\\'name\\', \\'title\\', \\'year\\']]\\n)\\n\\n# get all the steven spielberg movies\\nspielberg = (\\n    crew\\n    .query(\\'job == \"Director\"\\')\\n    .query(\\'name == \"Steven Spielberg\"\\')\\n    .merge(movies,\\n           left_on=\\'movie_id\\',\\n           right_on=\\'id\\')\\n    [[\\'name\\', \\'title\\', \\'year\\']]\\n)\\n\\n# perform the outer join\\n(\\n    sarandon\\n    .merge(\\n        spielberg,\\n        how=\\'outer\\',\\n        on=\\'year\\',\\n    )\\n    [[\\'year\\', \\'name_x\\', \\'name_y\\']]\\n    .drop_duplicates()\\n    .sort_values(\\'year\\')\\n)\\n            ' }),\n\t          Glamor.createElement(\n\t            _components.RawHTML,\n\t            null,\n\t            __webpack_require__(454)\n\t          )\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Checking your merges' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'A nice feature introduced in pandas 0.21 is the ability to validate your merges, using the ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            'validate'\n\t          ),\n\t          ' parameter. Sometimes you know that there should be only one matching row in the dataframe you\\'re joining. For example, I thought there would only be one director for each film. Putting in the validation told me that I was wrong.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\ndirectors = (\\n    crew\\n    .query(\\'job == \"Director\"\\')\\n)\\n\\n(\\n    movies\\n    .merge(\\n        directors,\\n        left_on=\\'id\\',\\n        right_on=\\'movie_id\\',\\n        validate=\\'1:1\\'\\n    )\\n)\\n\\n# This fails with a MergeError\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'That code fails. Looking into the data a bit more, I see that my assumption was incorrect. Some films have multiple directors, and ',\n\t          Glamor.createElement(\n\t            'a',\n\t            { href: 'https://en.wikipedia.org/wiki/Paris,_je_t%27aime' },\n\t            'Paris, je t\\'aime'\n\t          ),\n\t          ' has 21! I might have to put logic further along in my analysis to catch these cases.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    (\\n        movies\\n        .merge(\\n            directors,\\n            left_on=\\'id\\',\\n            right_on=\\'movie_id\\',\\n        )\\n    )\\n    .groupby(\\'title\\')\\n    .agg({\\'name\\': \\'count\\'})\\n    .sort_values(\\'name\\')\\n)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(455)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'This is very useful if you are working with messy data, or if you want to apply your code to new data in the future. It helps you validate that your assumptions about the structure of the data are correct. It makes your code more resilient.'\n\t        )\n\t      )\n\t    );\n\t  };\n\t\n\t  return MergeVerb;\n\t}(_react.Component);\n\t\n\texports.default = MergeVerb;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-techniques-programming-pandas-verbs-merge-js-a6f660970b7c034b2cc7.js","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>cast_id</th> <th>character</th> <th>credit_id</th> <th>gender</th> <th>id</th> <th>movie_id</th> <th>name</th> <th>order</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>242</td> <td>Jake Sully</td> <td>5602a8a7c3a3685532001c9a</td> <td>2</td> <td>65731</td> <td>19995</td> <td>Sam Worthington</td> <td>0</td> </tr> <tr> <th>1</th> <td>3</td> <td>Neytiri</td> <td>52fe48009251416c750ac9cb</td> <td>1</td> <td>8691</td> <td>19995</td> <td>Zoe Saldana</td> <td>1</td> </tr> <tr> <th>2</th> <td>25</td> <td>Dr. Grace Augustine</td> <td>52fe48009251416c750aca39</td> <td>1</td> <td>10205</td> <td>19995</td> <td>Sigourney Weaver</td> <td>2</td> </tr> <tr> <th>3</th> <td>4</td> <td>Col. Quaritch</td> <td>52fe48009251416c750ac9cf</td> <td>2</td> <td>32747</td> <td>19995</td> <td>Stephen Lang</td> <td>3</td> </tr> <tr> <th>4</th> <td>5</td> <td>Trudy Chacon</td> <td>52fe48009251416c750ac9d3</td> <td>1</td> <td>17647</td> <td>19995</td> <td>Michelle Rodriguez</td> <td>4</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_cast.html\n// module id = 444\n// module chunks = 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>credit_id</th> <th>department</th> <th>gender</th> <th>id</th> <th>job</th> <th>movie_id</th> <th>name</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>52fe48009251416c750aca23</td> <td>Editing</td> <td>0</td> <td>1721</td> <td>Editor</td> <td>19995</td> <td>Stephen E. Rivkin</td> </tr> <tr> <th>1</th> <td>539c47ecc3a36810e3001f87</td> <td>Art</td> <td>2</td> <td>496</td> <td>Production Design</td> <td>19995</td> <td>Rick Carter</td> </tr> <tr> <th>2</th> <td>54491c89c3a3680fb4001cf7</td> <td>Sound</td> <td>0</td> <td>900</td> <td>Sound Designer</td> <td>19995</td> <td>Christopher Boyes</td> </tr> <tr> <th>3</th> <td>54491cb70e0a267480001bd0</td> <td>Sound</td> <td>0</td> <td>900</td> <td>Supervising Sound Editor</td> <td>19995</td> <td>Christopher Boyes</td> </tr> <tr> <th>4</th> <td>539c4a4cc3a36810c9002101</td> <td>Production</td> <td>1</td> <td>1262</td> <td>Casting</td> <td>19995</td> <td>Mali Finn</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_crew.html\n// module id = 445\n// module chunks = 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>title</th> <th>release_date</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>The Dark Knight Rises</td> <td>2012-07-16</td> </tr> <tr> <th>1</th> <td>The Dark Knight</td> <td>2008-07-16</td> </tr> <tr> <th>2</th> <td>Interstellar</td> <td>2014-11-05</td> </tr> <tr> <th>3</th> <td>Inception</td> <td>2010-07-14</td> </tr> <tr> <th>4</th> <td>Batman Begins</td> <td>2005-06-10</td> </tr> <tr> <th>5</th> <td>Insomnia</td> <td>2002-05-24</td> </tr> <tr> <th>6</th> <td>The Prestige</td> <td>2006-10-19</td> </tr> <tr> <th>7</th> <td>Memento</td> <td>2000-10-11</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_merge1.html\n// module id = 453\n// module chunks = 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>year</th> <th>name_x</th> <th>name_y</th> </tr> </thead> <tbody> <tr> <th>41</th> <td>1974.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>54</th> <td>1975.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>52</th> <td>1977.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>49</th> <td>1979.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>51</th> <td>1981.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>55</th> <td>1982.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>56</th> <td>1983.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>50</th> <td>1984.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>53</th> <td>1985.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>47</th> <td>1989.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>44</th> <td>1991.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>40</th> <td>1992.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>45</th> <td>1993.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>19</th> <td>1994.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>37</th> <td>1995.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>42</th> <td>1997.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>16</th> <td>1998.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>25</th> <td>1999.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>27</th> <td>2000.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>11</th> <td>2001.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>28</th> <td>2002.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>21</th> <td>2004.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>12</th> <td>2005.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>8</th> <td>2007.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>0</th> <td>2008.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>5</th> <td>2009.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>10</th> <td>2010.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>38</th> <td>2011.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>1</th> <td>2012.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> <tr> <th>23</th> <td>2013.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>34</th> <td>2014.0</td> <td>Susan Sarandon</td> <td>NaN</td> </tr> <tr> <th>48</th> <td>2015.0</td> <td>NaN</td> <td>Steven Spielberg</td> </tr> <tr> <th>18</th> <td>2016.0</td> <td>Susan Sarandon</td> <td>Steven Spielberg</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_merge2.html\n// module id = 454\n// module chunks = 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>name</th> </tr> <tr> <th>title</th> <th></th> </tr> </thead> <tbody> <tr> <th>Bambi</th> <td>7</td> </tr> <tr> <th>Fantasia 2000</th> <td>8</td> </tr> <tr> <th>Fantasia</th> <td>12</td> </tr> <tr> <th>Movie 43</th> <td>12</td> </tr> <tr> <th>Paris, je t'aime</th> <td>21</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_merge3.html\n// module id = 455\n// module chunks = 187810446712651","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>budget</th> <th>id</th> <th>original_title</th> <th>overview</th> <th>popularity</th> <th>release_date</th> <th>runtime</th> <th>status</th> <th>tagline</th> <th>title</th> <th>vote_average</th> <th>vote_count</th> <th>year</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>237000000</td> <td>19995</td> <td>Avatar</td> <td>In the 22nd century, a paraplegic Marine is di...</td> <td>150.437577</td> <td>2009-12-10</td> <td>162.0</td> <td>Released</td> <td>Enter the World of Pandora.</td> <td>Avatar</td> <td>7.2</td> <td>11800</td> <td>2009.0</td> </tr> <tr> <th>1</th> <td>300000000</td> <td>285</td> <td>Pirates of the Caribbean: At World's End</td> <td>Captain Barbossa, long believed to be dead, ha...</td> <td>139.082615</td> <td>2007-05-19</td> <td>169.0</td> <td>Released</td> <td>At the end of the world, the adventure begins.</td> <td>Pirates of the Caribbean: At World's End</td> <td>6.9</td> <td>4500</td> <td>2007.0</td> </tr> <tr> <th>2</th> <td>245000000</td> <td>206647</td> <td>Spectre</td> <td>A cryptic message from Bond’s past sends him o...</td> <td>107.376788</td> <td>2015-10-26</td> <td>148.0</td> <td>Released</td> <td>A Plan No One Escapes</td> <td>Spectre</td> <td>6.3</td> <td>4466</td> <td>2015.0</td> </tr> <tr> <th>3</th> <td>250000000</td> <td>49026</td> <td>The Dark Knight Rises</td> <td>Following the death of District Attorney Harve...</td> <td>112.312950</td> <td>2012-07-16</td> <td>165.0</td> <td>Released</td> <td>The Legend Ends</td> <td>The Dark Knight Rises</td> <td>7.6</td> <td>9106</td> <td>2012.0</td> </tr> <tr> <th>4</th> <td>260000000</td> <td>49529</td> <td>John Carter</td> <td>John Carter is a war-weary, former military ca...</td> <td>43.926995</td> <td>2012-03-07</td> <td>132.0</td> <td>Released</td> <td>Lost in our world, found in another.</td> <td>John Carter</td> <td>6.1</td> <td>2124</td> <td>2012.0</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_movies.html\n// module id = 114\n// module chunks = 159481207458299 187810446712651","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Section, Subsection, Subsubsection, Figure, Paragraph, Code, RawHTML\n} from '../../../../../components';\n\nclass MergeVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Section name='merge'>\n        <Paragraph note={<a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html\">pandas documentation</a>}>\n          Merge is a lot like the <span className='mono'>JOIN</span> operation in SQL.\n          You use it to join together dataframe that contain a common key.\n          The common key is a column in each dataframe that you can use to look up between the dataframes,\n          some sort of identifier.\n        </Paragraph>\n        <Paragraph note={<a href=\"https://gist.github.com/dataewan/9e3eb3fee268b1eb4a629fd216e20712\">where the data comes from</a>}>\n          I'm going to use three dataframes for this that contain information about movies.\n          There are dataframes named <span className='mono'>movies</span>, <span className='mono'>cast</span>, and <span className='mono'>crew</span>.\n        </Paragraph>\n        <Figure caption=\"Movies dataframe\" fullwidth={true}>\n          <RawHTML >\n            {require('./_movies.html')}\n          </RawHTML>\n        </Figure>\n        <Figure caption=\"Cast dataframe\" fullwidth={true}>\n          <RawHTML >\n            {require('./_cast.html')}\n          </RawHTML>\n        </Figure>\n        <Figure caption=\"Crew dataframe\" fullwidth={true}>\n          <RawHTML >\n            {require('./_crew.html')}\n          </RawHTML>\n        </Figure>\n        <Paragraph>\n          Note that there is an <span className='mono'>id</span> column in the movies dataframe.\n          This matches the <span className='mono'>movie_id</span> column in the cast and crew dataframes.\n        </Paragraph>\n        <Subsection name='Joins in pandas'>\n          <Code language='python' code={`\n(\n    # first a subquery to get all the Christopher Nolan directed films\n    crew\n    .query('job == \"Director\"')\n    .query('name == \"Christopher Nolan\"')\n    # now join with the movies and get their titles\n    .merge(\n        movies,\n        left_on='movie_id',\n        right_on='id'\n    )\n    [['title', 'release_date']]\n)\n          `} />\n          <RawHTML>\n            {require('./_merge1.html')}\n          </RawHTML>\n          <Subsubsection name=\"left, right, inner, outer\">\n            <Paragraph>\n              By default pandas does an inner join. \n              This means that only rows in both the dataframes are returned.\n              The <span className='mono'>how</span> parameter lets you do different sorts of joins.\n              This (slightly contrived) example returns any years that either Susan Sarandon or Steven Spielberg made a film.\n              This is an outer join, because we want rows that are present in either.\n            </Paragraph>\n            <Code language='python' code={`\n# get all the susan sarandon movies\nsarandon = (\n    cast\n    .query('name == \"Susan Sarandon\"')\n    .merge(movies,\n           left_on='movie_id',\n           right_on='id')\n    [['name', 'title', 'year']]\n)\n\n# get all the steven spielberg movies\nspielberg = (\n    crew\n    .query('job == \"Director\"')\n    .query('name == \"Steven Spielberg\"')\n    .merge(movies,\n           left_on='movie_id',\n           right_on='id')\n    [['name', 'title', 'year']]\n)\n\n# perform the outer join\n(\n    sarandon\n    .merge(\n        spielberg,\n        how='outer',\n        on='year',\n    )\n    [['year', 'name_x', 'name_y']]\n    .drop_duplicates()\n    .sort_values('year')\n)\n            `} />\n          <RawHTML>\n            {require('./_merge2.html')}\n          </RawHTML>\n        </Subsubsection>\n        </Subsection>\n        <Subsection name=\"Checking your merges\">\n          <Paragraph>\n            A nice feature introduced in pandas 0.21 is the ability to validate your merges,\n            using the <span className='mono'>validate</span> parameter.\n            Sometimes you know that there should be only one matching row in the dataframe you're joining.\n            For example, I thought there would only be one director for each film.\n            Putting in the validation told me that I was wrong.\n          </Paragraph>\n          <Code language='python' code={`\ndirectors = (\n    crew\n    .query('job == \"Director\"')\n)\n\n(\n    movies\n    .merge(\n        directors,\n        left_on='id',\n        right_on='movie_id',\n        validate='1:1'\n    )\n)\n\n# This fails with a MergeError\n          `} />\n          <Paragraph>\n            That code fails.\n            Looking into the data a bit more, I see that my assumption was incorrect.\n            Some films have multiple directors,\n            and <a href=\"https://en.wikipedia.org/wiki/Paris,_je_t%27aime\">Paris, je t'aime</a> has 21!\n            I might have to put logic further along in my analysis to catch these cases.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    (\n        movies\n        .merge(\n            directors,\n            left_on='id',\n            right_on='movie_id',\n        )\n    )\n    .groupby('title')\n    .agg({'name': 'count'})\n    .sort_values('name')\n)\n          `} />\n          <RawHTML>\n            {require('./_merge3.html')}\n          </RawHTML>\n          <Paragraph>\n            This is very useful if you are working with messy data,\n            or if you want to apply your code to new data in the future.\n            It helps you validate that your assumptions about the structure of the data are correct.\n            It makes your code more resilient.\n          </Paragraph>\n        </Subsection>\n      </Section>\n    );\n  }\n}\n\nexport default MergeVerb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/techniques/programming/pandas/verbs/merge.js"],"sourceRoot":""}