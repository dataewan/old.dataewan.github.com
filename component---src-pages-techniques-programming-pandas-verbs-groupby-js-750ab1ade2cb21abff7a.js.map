{"version":3,"sources":["webpack:///component---src-pages-techniques-programming-pandas-verbs-groupby-js-750ab1ade2cb21abff7a.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby4.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby5.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby6.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_iris.html","webpack:///./src/pages/techniques/programming/pandas/verbs/groupby.js"],"names":["webpackJsonp","481","module","exports","482","483","484","485","486","311","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_propTypes","_components","GroupByVerb","_Component","props","this","render","createElement","Section","name","Paragraph","note","href","className","RawHTML","Code","language","code","Subsection","Component"],"mappings":"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","file":"component---src-pages-techniques-programming-pandas-verbs-groupby-js-750ab1ade2cb21abff7a.js","sourcesContent":["webpackJsonp([29366768633658],{\n\n/***/ 481:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>3.428</td> <td>1.462</td> <td>0.246</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>2.770</td> <td>4.260</td> <td>1.326</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>2.974</td> <td>5.552</td> <td>2.026</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 482:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 483:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0.266674</td> <td>0.189941</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>1</th> <td>-0.300718</td> <td>-1.129096</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>2</th> <td>-0.868111</td> <td>-0.601481</td> <td>-0.932836</td> <td>-0.436492</td> </tr> <tr> <th>3</th> <td>-1.151807</td> <td>-0.865288</td> <td>0.218813</td> <td>-0.436492</td> </tr> <tr> <th>4</th> <td>-0.017022</td> <td>0.453749</td> <td>-0.357011</td> <td>-0.436492</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 484:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length_max</th> <th>sepal_length_min</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.8</td> <td>4.3</td> </tr> <tr> <th>versicolor</th> <td>7.0</td> <td>4.9</td> </tr> <tr> <th>virginica</th> <td>7.9</td> <td>4.9</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 485:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>species</th> <th>sepal_length</th> <th>sepal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>setosa</td> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>1</th> <td>versicolor</td> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>2</th> <td>virginica</td> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 486:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> <th>species</th> </tr> </thead> <tbody> <tr> <th>139</th> <td>6.9</td> <td>3.1</td> <td>5.4</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>137</th> <td>6.4</td> <td>3.1</td> <td>5.5</td> <td>1.8</td> <td>virginica</td> </tr> <tr> <th>128</th> <td>6.4</td> <td>2.8</td> <td>5.6</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>19</th> <td>5.1</td> <td>3.8</td> <td>1.5</td> <td>0.3</td> <td>setosa</td> </tr> <tr> <th>143</th> <td>6.8</td> <td>3.2</td> <td>5.9</td> <td>2.3</td> <td>virginica</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 311:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(7);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _components = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GroupByVerb = function (_Component) {\n\t  _inherits(GroupByVerb, _Component);\n\t\n\t  function GroupByVerb(props) {\n\t    _classCallCheck(this, GroupByVerb);\n\t\n\t    return _possibleConstructorReturn(this, _Component.call(this, props));\n\t  }\n\t\n\t  GroupByVerb.prototype.render = function render() {\n\t    return Glamor.createElement(\n\t      _components.Section,\n\t      { name: 'groupby' },\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'groupby'\n\t        ),\n\t        ' lets you perform aggregations of your data. It is similar to the SQL ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'GROUP BY'\n\t        ),\n\t        ' operation. I\\'ll use the iris dataset to demonstrate, here\\'s a sample of that data.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.RawHTML,\n\t        null,\n\t        __webpack_require__(486)\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        null,\n\t        'Usually perform the grouping by passing in a list of columns that you want to group by. Here I\\'ll just group by a single column, but you can easily add in multiple.'\n\t      ),\n\t      Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .groupby([\\'species\\'])\\n)\\n\\n# returns <pandas.core.groupby.DataFrameGroupBy object at 0x1065c37f0>\\n        ' }),\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/groupby.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        'There is a good section in the pandas documentation about the operations you can perform on a groupby object. I\\'m just going to extract the bits that I use a lot and have to look up.'\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Performing aggregations' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'Most frequently you want to aggregate up your group somehow. Here I\\'ll take the mean of all the numeric columns in my groups.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .groupby([\\'species\\'])\\n    .agg(np.mean)\\n)\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(481)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'You can also specify particular aggregation functions to different columns in the group. You do this by passing in a dictionary to the agg function. Here I\\'ll take the mean of the sepal_length, and take the max of the sepal_width.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .groupby([\\'species\\'])\\n    .agg({\\n        \\'sepal_length\\': np.mean,\\n        \\'sepal_width\\': np.max\\n    })\\n)\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(482)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Applying function to each group' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          { note: Glamor.createElement(\n\t              'a',\n\t              { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html' },\n\t              'pandas documentation'\n\t            ) },\n\t          'The ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            'transform'\n\t          ),\n\t          ' function applies a function over the group and returns a transformed version of that group. The output has the same number of observations as go into the function. I\\'ve used it to calculate the ',\n\t          Glamor.createElement(\n\t            'a',\n\t            { href: 'https://en.wikipedia.org/wiki/Standard_score' },\n\t            'z-score'\n\t          ),\n\t          ' of all the observations in the data frame.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .groupby([\\'species\\'])\\n    .transform(\\n        # formula for the z score\\n        lambda x: (x - x.mean()) / x.std()\\n    )\\n)\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(483)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'To perform more complex aggregations, you usually want to write a function that does that aggregation. It should return a dataframe, a series, or scalar. The apply function will figure out how to join them all back together into a dataframe.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\ndef summarise(x):\\n    return pd.Series({\\n        \\'sepal_length_max\\': x.sepal_length.max(),\\n        \\'sepal_length_min\\': x.sepal_length.min()\\n    })\\n\\n(\\n    df\\n    .groupby([\\'species\\'])\\n    .apply(summarise)\\n)\\n\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(484)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'This is very flexible, but will be slower than the aggregate or transform functions. Note that this will apply the function twice to the first group. If you\\'re applying a function with side effects, for example writing results out to a file, you might get unexpected results.'\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Grouping by without an index' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'When you do a group by, it creates an index on the output from the columns you\\'ve grouped by. This can be fiddly for subsequent operations that expect a plain dataframe. Either you can use the ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            'reset_index()'\n\t          ),\n\t          ' function to remove the index, or you can pass the ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            'as_index=False'\n\t          ),\n\t          ' argument to the groupby.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .groupby([\\'species\\'], as_index=False)\\n    .agg({\\n        \\'sepal_length\\': np.mean,\\n        \\'sepal_width\\': np.max\\n    })\\n)\\n        ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(485)\n\t        ),\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'That looks pretty much the same as the grouping from above, but note that the grouping column (species) doesn\\'t appear in the index column any more.'\n\t        )\n\t      )\n\t    );\n\t  };\n\t\n\t  return GroupByVerb;\n\t}(_react.Component);\n\t\n\texports.default = GroupByVerb;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-techniques-programming-pandas-verbs-groupby-js-750ab1ade2cb21abff7a.js","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>3.428</td> <td>1.462</td> <td>0.246</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>2.770</td> <td>4.260</td> <td>1.326</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>2.974</td> <td>5.552</td> <td>2.026</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_groupby2.html\n// module id = 481\n// module chunks = 29366768633658","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_groupby3.html\n// module id = 482\n// module chunks = 29366768633658","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0.266674</td> <td>0.189941</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>1</th> <td>-0.300718</td> <td>-1.129096</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>2</th> <td>-0.868111</td> <td>-0.601481</td> <td>-0.932836</td> <td>-0.436492</td> </tr> <tr> <th>3</th> <td>-1.151807</td> <td>-0.865288</td> <td>0.218813</td> <td>-0.436492</td> </tr> <tr> <th>4</th> <td>-0.017022</td> <td>0.453749</td> <td>-0.357011</td> <td>-0.436492</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_groupby4.html\n// module id = 483\n// module chunks = 29366768633658","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length_max</th> <th>sepal_length_min</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.8</td> <td>4.3</td> </tr> <tr> <th>versicolor</th> <td>7.0</td> <td>4.9</td> </tr> <tr> <th>virginica</th> <td>7.9</td> <td>4.9</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_groupby5.html\n// module id = 484\n// module chunks = 29366768633658","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>species</th> <th>sepal_length</th> <th>sepal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>setosa</td> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>1</th> <td>versicolor</td> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>2</th> <td>virginica</td> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_groupby6.html\n// module id = 485\n// module chunks = 29366768633658","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> <th>species</th> </tr> </thead> <tbody> <tr> <th>139</th> <td>6.9</td> <td>3.1</td> <td>5.4</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>137</th> <td>6.4</td> <td>3.1</td> <td>5.5</td> <td>1.8</td> <td>virginica</td> </tr> <tr> <th>128</th> <td>6.4</td> <td>2.8</td> <td>5.6</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>19</th> <td>5.1</td> <td>3.8</td> <td>1.5</td> <td>0.3</td> <td>setosa</td> </tr> <tr> <th>143</th> <td>6.8</td> <td>3.2</td> <td>5.9</td> <td>2.3</td> <td>virginica</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_iris.html\n// module id = 486\n// module chunks = 29366768633658","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Section, Subsection, Subsubsection, Figure, Paragraph, Code, RawHTML\n} from '../../../../../components';\n\nclass GroupByVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Section name='groupby'>\n        <Paragraph note={<a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html\">pandas documentation</a>}>\n          <span className='mono'>groupby</span> lets you perform aggregations of your data.\n          It is similar to the SQL <span className='mono'>GROUP BY</span> operation.\n          I'll use the iris dataset to demonstrate,\n          here's a sample of that data.\n        </Paragraph>\n        <RawHTML>\n          {require('./_iris.html')}\n        </RawHTML>\n        <Paragraph>\n          Usually perform the grouping by passing in a list of columns that you want to group by.\n          Here I'll just group by a single column, but you can easily add in multiple.\n        </Paragraph>\n        <Code language='python' code={`\n(\n    df\n    .groupby(['species'])\n)\n\n# returns <pandas.core.groupby.DataFrameGroupBy object at 0x1065c37f0>\n        `} />\n        <Paragraph note={<a href=\"https://pandas.pydata.org/pandas-docs/stable/groupby.html\">pandas documentation</a>}>\n          There is a good section in the pandas documentation about the operations you can perform on a groupby object.\n          I'm just going to extract the bits that I use a lot and have to look up.\n        </Paragraph>\n        <Subsection name='Performing aggregations'>\n          <Paragraph>\n            Most frequently you want to aggregate up your group somehow.\n            Here I'll take the mean of all the numeric columns in my groups.\n          </Paragraph>\n        <Code language='python' code={`\n(\n    df\n    .groupby(['species'])\n    .agg(np.mean)\n)\n        `} />\n        <RawHTML>\n          {require('./_groupby2.html')}\n        </RawHTML>\n        <Paragraph>\n          You can also specify particular aggregation functions to different columns in the group.\n          You do this by passing in a dictionary to the agg function.\n          Here I'll take the mean of the sepal_length,\n          and take the max of the sepal_width.\n        </Paragraph>\n        <Code language='python' code={`\n(\n    df\n    .groupby(['species'])\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        `} />\n        <RawHTML>\n          {require('./_groupby3.html')}\n        </RawHTML>\n        </Subsection>\n        <Subsection name='Applying function to each group'>\n          <Paragraph note={<a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html\">pandas documentation</a>}>\n            The <span className='mono'>transform</span> function applies a function over the group and returns a transformed version of that group.\n            The output has the same number of observations as go into the function.\n            I've used it to calculate the <a href=\"https://en.wikipedia.org/wiki/Standard_score\">z-score</a> of all the observations in the data frame.\n          </Paragraph>\n        <Code language='python' code={`\n(\n    df\n    .groupby(['species'])\n    .transform(\n        # formula for the z score\n        lambda x: (x - x.mean()) / x.std()\n    )\n)\n        `} />\n        <RawHTML>\n          {require('./_groupby4.html')}\n        </RawHTML>\n        <Paragraph>\n          To perform more complex aggregations, you usually want to write a function that does that aggregation.\n          It should return a dataframe, a series, or scalar.\n          The apply function will figure out how to join them all back together into a dataframe.\n        </Paragraph>\n        <Code language='python' code={`\ndef summarise(x):\n    return pd.Series({\n        'sepal_length_max': x.sepal_length.max(),\n        'sepal_length_min': x.sepal_length.min()\n    })\n\n(\n    df\n    .groupby(['species'])\n    .apply(summarise)\n)\n\n        `} />\n        <RawHTML>\n          {require('./_groupby5.html')}\n        </RawHTML>\n        <Paragraph>\n          This is very flexible, but will be slower than the aggregate or transform functions.\n          Note that this will apply the function twice to the first group.\n          If you're applying a function with side effects,\n          for example writing results out to a file, \n          you might get unexpected results.\n        </Paragraph>\n        </Subsection>\n        <Subsection name='Grouping by without an index'>\n          <Paragraph>\n            When you do a group by, it creates an index on the output from the columns you've grouped by.\n            This can be fiddly for subsequent operations that expect a plain dataframe.\n            Either you can use the <span className='mono'>reset_index()</span> function to remove the index,\n            or you can pass the <span className='mono'>as_index=False</span> argument to the groupby.\n          </Paragraph>\n        <Code language='python' code={`\n(\n    df\n    .groupby(['species'], as_index=False)\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        `} />\n        <RawHTML>\n          {require('./_groupby6.html')}\n        </RawHTML>\n        <Paragraph>\n          That looks pretty much the same as the grouping from above,\n          but note that the grouping column (species) doesn't appear in the index column any more.\n        </Paragraph>\n        </Subsection>\n      </Section>\n    );\n  }\n}\n\nexport default GroupByVerb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/techniques/programming/pandas/verbs/groupby.js"],"sourceRoot":""}