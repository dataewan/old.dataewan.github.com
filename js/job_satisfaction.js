// Generated by CoffeeScript 1.7.1
(function() {
  var AxesChart, BubblePlot, JobSatisfactionPlot, LinePlot, ScatterPlot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AxesChart = (function() {
    function AxesChart() {
      this.draw = __bind(this.draw, this);
      this._width = 800;
      this._height = 600;
      this._margin = {
        top: 50,
        left: 50,
        bottom: 50,
        right: 50
      };
      this._colours = ["#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"];
    }

    AxesChart.prototype.draw = function() {
      this.setup();
      this.predraw();
      this.selection.each((function(_this) {
        return function(d, i) {
          return _this._draw(d, i);
        };
      })(this));
      return this.postdraw();
    };

    AxesChart.prototype.setup = function() {
      this.selection = d3.select(this._el);
      this.selection.datum(this._data);
      this._canvas = this.selection.append("svg").attr("width", this._width + this._margin.left + this._margin.right).attr("height", this._height + this._margin.top + this._margin.bottom);
      return this._plotarea = this._canvas.append("g").attr("transform", "translate(" + this._margin.left + ", " + this._margin.top + ")");
    };

    AxesChart.prototype._draw = function(d, i) {
      throw "Not implemented";
    };

    AxesChart.prototype.predraw = function() {};

    AxesChart.prototype.postdraw = function() {};

    AxesChart.prototype.el = function(value) {
      if (!arguments.length) {
        return this._el;
      }
      this._el = value;
      return this;
    };

    AxesChart.prototype.data = function(value) {
      if (!arguments.length) {
        return this._data;
      }
      this._data = value;
      return this;
    };

    AxesChart.prototype.width = function(value) {
      if (!arguments.length) {
        return this._width;
      }
      this._width = value;
      return this;
    };

    AxesChart.prototype.height = function(value) {
      if (!arguments.length) {
        return this._height;
      }
      this._height = value;
      return this;
    };

    AxesChart.prototype.margin = function(value) {
      if (!arguments.length) {
        return this._margin;
      }
      this._margin = value;
      return this;
    };

    AxesChart.prototype.xscale = function(value) {
      if (!arguments.length) {
        return this._xscale;
      }
      this._xscale = value;
      return this;
    };

    AxesChart.prototype.yscale = function(value) {
      if (!arguments.length) {
        return this._yscale;
      }
      this._yscale = value;
      return this;
    };

    AxesChart.prototype.x = function(i) {
      if (this._xscale == null) {
        return i;
      }
      return this._xscale(i);
    };

    AxesChart.prototype.y = function(i) {
      if (this._yscale == null) {
        return i;
      }
      return this._yscale(i);
    };

    AxesChart.prototype.colour = function(i) {
      if (this.levels == null) {
        this.levels = _.uniq(_.pluck(this.data(), "group"));
        console.log(this.levels);
      }
      return this._colours[_.indexOf(this.levels, i)];
    };

    AxesChart.prototype.xaxis = function() {
      if (this._xscale != null) {
        if (this._xaxis == null) {
          this._xaxis = d3.svg.axis().scale(this._xscale).orient("bottom");
        }
        return this._plotarea.append("g").attr("class", "x axis").attr("transform", "translate(0, " + this._height + ")").call(this._xaxis);
      }
    };

    AxesChart.prototype.yaxis = function() {
      if (this._yscale != null) {
        if (this._yaxis == null) {
          this._yaxis = d3.svg.axis().scale(this._yscale).orient('left');
        }
        return this._plotarea.append("g").attr("class", "y axis").call(this._yaxis);
      }
    };

    return AxesChart;

  })();

  ScatterPlot = (function(_super) {
    __extends(ScatterPlot, _super);

    function ScatterPlot(pointsize) {
      if (pointsize == null) {
        pointsize = 5;
      }
      ScatterPlot.__super__.constructor.apply(this, arguments);
      this._pointsize = pointsize;
    }

    ScatterPlot.prototype._draw = function(d, i) {
      return this._plotarea.selectAll("circle").data(d).enter().append("circle").attr("r", this._pointsize).attr("cx", (function(_this) {
        return function(d) {
          return _this.x(d.x);
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this.y(d.y);
        };
      })(this)).attr("fill", (function(_this) {
        return function(d) {
          return _this.colour(d.group);
        };
      })(this));
    };

    ScatterPlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    return ScatterPlot;

  })(AxesChart);

  BubblePlot = (function(_super) {
    __extends(BubblePlot, _super);

    function BubblePlot(maxpointsize) {
      if (maxpointsize == null) {
        maxpointsize = 20;
      }
      BubblePlot.__super__.constructor.apply(this, arguments);
      this._maxpointsize = maxpointsize;
    }

    BubblePlot.prototype.predraw = function() {
      var extent;
      extent = d3.extent(_.pluck(this.data(), "z"));
      return this.radiusscale = d3.scale.linear().domain(extent).range([5, this._maxpointsize]);
    };

    BubblePlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    BubblePlot.prototype._draw = function(d, i) {
      return this._plotarea.selectAll("circle").data(d).enter().append("circle").attr("r", (function(_this) {
        return function(d) {
          return Math.pow(_this.radiusscale(d.z), 1 / 2) * Math.PI;
        };
      })(this)).attr("cx", (function(_this) {
        return function(d) {
          return _this.x(d.x);
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this.y(d.y);
        };
      })(this)).attr("fill", (function(_this) {
        return function(d) {
          return _this.colour(d.group);
        };
      })(this));
    };

    return BubblePlot;

  })(AxesChart);

  LinePlot = (function(_super) {
    __extends(LinePlot, _super);

    function LinePlot() {
      return LinePlot.__super__.constructor.apply(this, arguments);
    }

    LinePlot.prototype._draw = function(d, i) {
      var line, series;
      series = _.pairs(_.groupBy(this._data, 'group'));
      if (this.line == null) {
        line = d3.svg.line().interpolate("linear").x((function(_this) {
          return function(d) {
            return _this.x(d.x);
          };
        })(this)).y((function(_this) {
          return function(d) {
            return _this.y(d.y);
          };
        })(this));
      }
      console.log(series);
      return this._plotarea.selectAll('.dataline').data(series).enter().append("path").attr("class", "dataline").attr("d", function(d) {
        return line(d[1]);
      }).attr("stroke", (function(_this) {
        return function(d) {
          return _this.colour(d[0]);
        };
      })(this));
    };

    LinePlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    return LinePlot;

  })(AxesChart);

  JobSatisfactionPlot = (function(_super) {
    __extends(JobSatisfactionPlot, _super);

    function JobSatisfactionPlot(pointsize, yvar, hline) {
      if (pointsize == null) {
        pointsize = 5;
      }
      if (yvar == null) {
        yvar = "Satisfaction";
      }
      if (hline == null) {
        hline = "no";
      }
      JobSatisfactionPlot.__super__.constructor.apply(this, arguments);
      this._pointsize = pointsize;
      this._yvar = yvar;
      this._hline = hline;
    }

    JobSatisfactionPlot.prototype.predraw = function() {
      this._label = this._plotarea.append("text").attr("x", this._width * 0.6).attr("y", this._height * 0.8).attr("id", "occupation_label").style("font-size", "12px");
      if (this._hline === "yes") {
        return this._plotarea.append("line").attr("x1", 0).attr("x2", this._width).attr("y1", (function(_this) {
          return function() {
            return _this.y(0);
          };
        })(this)).attr("y2", (function(_this) {
          return function() {
            return _this.y(0);
          };
        })(this)).attr("stroke-width", "1px").attr("stroke", "#aaa");
      }
    };

    JobSatisfactionPlot.prototype._draw = function(d, i) {
      return this._plotarea.selectAll("circle").data(d).enter().append("circle").attr("r", this._pointsize).attr("id", (function(_this) {
        return function(d) {
          return d['id'];
        };
      })(this)).attr("cx", (function(_this) {
        return function(d) {
          return _this.x(d.Income);
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this.y(d[_this._yvar]);
        };
      })(this)).attr("opacity", 0.6).attr("fill", this._colours[0]).on("mouseover", (function(_this) {
        return function(d) {
          return _this.tooltip(d);
        };
      })(this));
    };

    JobSatisfactionPlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    JobSatisfactionPlot.prototype.tooltip = function(d) {
      var point;
      this._plotarea.selectAll("circle").transition(100).attr("r", this._pointsize).attr("fill", this._colours[0]);
      point = this._plotarea.select("circle#" + d['id']);
      point.transition(100).attr("r", this._pointsize * 2).attr("fill", this._colours[1]);
      return this._label.text(d.Occupation);
    };

    return JobSatisfactionPlot;

  })(AxesChart);

  d3.csv("/data/plot_data.csv").get((function(_this) {
    return function(error, data) {
      var corrected, hline, pointsize, unmodified, xvals, yvals, yvar;
      _this.data = data;
      xvals = _.map(_.pluck(data, "Income"), function(i) {
        return +i;
      });
      yvals = _.map(_.pluck(data, "Satisfaction"), function(i) {
        return +i;
      });
      unmodified = new JobSatisfactionPlot(pointsize = 5, yvar = "Satisfaction");
      unmodified.width(600).height(400).el('#unmodified_plot').data(data);
      unmodified.xscale(d3.scale.linear().domain([0, _.max(xvals)]).range([0, unmodified.width()]));
      unmodified.yscale(d3.scale.linear().domain([_.min(yvals), _.max(yvals)]).range([unmodified.height(), 0]));
      unmodified.draw();
      yvals = _.map(_.pluck(data, "Difference"), function(i) {
        return +i;
      });
      corrected = new JobSatisfactionPlot(pointsize = 5, yvar = "Difference", hline = "yes");
      corrected.width(600).height(400).el('#adjusted_plot').data(data);
      corrected.xscale(d3.scale.linear().domain([0, _.max(xvals)]).range([0, corrected.width()]));
      corrected.yscale(d3.scale.linear().domain([_.min(yvals), _.max(yvals)]).range([corrected.height(), 0]));
      return corrected.draw();
    };
  })(this));

}).call(this);
