(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{C3u4:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.266674</td>\n      <td>0.189941</td>\n      <td>-0.357011</td>\n      <td>-0.436492</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.300718</td>\n      <td>-1.129096</td>\n      <td>-0.357011</td>\n      <td>-0.436492</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.868111</td>\n      <td>-0.601481</td>\n      <td>-0.932836</td>\n      <td>-0.436492</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.151807</td>\n      <td>-0.865288</td>\n      <td>0.218813</td>\n      <td>-0.436492</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.017022</td>\n      <td>0.453749</td>\n      <td>-0.357011</td>\n      <td>-0.436492</td>\n    </tr>\n  </tbody>\n</table>'},GCdf:function(t,n,e){"use strict";e.r(n);var a=e("q1tI"),r=e.n(a),d=e("Kvkj"),o=e("ykMn"),h=e.n(o),l=e("Wsin"),s=e.n(l),i=e("eA97"),p=e.n(i),c=e("C3u4"),u=e.n(c),g=e("bnx2"),m=e.n(g),y=e("rxz9"),f=e.n(y);var b=function(t){var n,e;function a(n){return t.call(this,n)||this}return e=t,(n=a).prototype=Object.create(e.prototype),n.prototype.constructor=n,n.__proto__=e,a.prototype.render=function(){return r.a.createElement(d.e,null,r.a.createElement(d.j,{name:"groupby"},r.a.createElement(d.h,{note:r.a.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"},"pandas documentation")},r.a.createElement("span",{className:"mono"},"groupby")," lets you perform aggregations of your data. It is similar to the SQL"," ",r.a.createElement("span",{className:"mono"},"GROUP BY")," operation. I'll use the iris dataset to demonstrate, here's a sample of that data."),r.a.createElement(d.i,null,h.a),r.a.createElement(d.h,null,"Usually perform the grouping by passing in a list of columns that you want to group by. Here I'll just group by a single column, but you can easily add in multiple."),r.a.createElement(d.b,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n)\n\n# returns <pandas.core.groupby.DataFrameGroupBy object at 0x1065c37f0>\n        "}),r.a.createElement(d.h,{note:r.a.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/groupby.html"},"pandas documentation")},"There is a good section in the pandas documentation about the operations you can perform on a groupby object. I'm just going to extract the bits that I use a lot and have to look up."),r.a.createElement(d.k,{name:"Performing aggregations"},r.a.createElement(d.h,null,"Most frequently you want to aggregate up your group somehow. Here I'll take the mean of all the numeric columns in my groups."),r.a.createElement(d.b,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .agg(np.mean)\n)\n        "}),r.a.createElement(d.i,null,s.a),r.a.createElement(d.h,null,"You can also specify particular aggregation functions to different columns in the group. You do this by passing in a dictionary to the agg function. Here I'll take the mean of the sepal_length, and take the max of the sepal_width."),r.a.createElement(d.b,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        "}),r.a.createElement(d.i,null,p.a)),r.a.createElement(d.k,{name:"Applying function to each group"},r.a.createElement(d.h,{note:r.a.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html"},"pandas documentation")},"The ",r.a.createElement("span",{className:"mono"},"transform")," function applies a function over the group and returns a transformed version of that group. The output has the same number of observations as go into the function. I've used it to calculate the"," ",r.a.createElement("a",{href:"https://en.wikipedia.org/wiki/Standard_score"},"z-score")," ","of all the observations in the data frame."),r.a.createElement(d.b,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .transform(\n        # formula for the z score\n        lambda x: (x - x.mean()) / x.std()\n    )\n)\n        "}),r.a.createElement(d.i,null,u.a),r.a.createElement(d.h,null,"To perform more complex aggregations, you usually want to write a function that does that aggregation. It should return a dataframe, a series, or scalar. The apply function will figure out how to join them all back together into a dataframe."),r.a.createElement(d.b,{language:"python",code:"\ndef summarise(x):\n    return pd.Series({\n        'sepal_length_max': x.sepal_length.max(),\n        'sepal_length_min': x.sepal_length.min()\n    })\n\n(\n    df\n    .groupby(['species'])\n    .apply(summarise)\n)\n\n        "}),r.a.createElement(d.i,null,m.a),r.a.createElement(d.h,null,"This is very flexible, but will be slower than the aggregate or transform functions. Note that this will apply the function twice to the first group. If you're applying a function with side effects, for example writing results out to a file, you might get unexpected results.")),r.a.createElement(d.k,{name:"Grouping by without an index"},r.a.createElement(d.h,null,"When you do a group by, it creates an index on the output from the columns you've grouped by. This can be fiddly for subsequent operations that expect a plain dataframe. Either you can use the"," ",r.a.createElement("span",{className:"mono"},"reset_index()")," function to remove the index, or you can pass the"," ",r.a.createElement("span",{className:"mono"},"as_index=False")," argument to the groupby."),r.a.createElement(d.b,{language:"python",code:"\n(\n    df\n    .groupby(['species'], as_index=False)\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        "}),r.a.createElement(d.i,null,f.a),r.a.createElement(d.h,null,"That looks pretty much the same as the grouping from above, but note that the grouping column (species) doesn't appear in the index column any more."))))},a}(a.Component);n.default=b},Wsin:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>5.006</td>\n      <td>3.428</td>\n      <td>1.462</td>\n      <td>0.246</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>5.936</td>\n      <td>2.770</td>\n      <td>4.260</td>\n      <td>1.326</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>6.588</td>\n      <td>2.974</td>\n      <td>5.552</td>\n      <td>2.026</td>\n    </tr>\n  </tbody>\n</table>'},bnx2:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>sepal_length_max</th>\n      <th>sepal_length_min</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>5.8</td>\n      <td>4.3</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>7.0</td>\n      <td>4.9</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>7.9</td>\n      <td>4.9</td>\n    </tr>\n  </tbody>\n</table>'},eA97:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>5.006</td>\n      <td>4.4</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>5.936</td>\n      <td>3.4</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>6.588</td>\n      <td>3.8</td>\n    </tr>\n  </tbody>\n</table>'},rxz9:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>species</th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>setosa</td>\n      <td>5.006</td>\n      <td>4.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>versicolor</td>\n      <td>5.936</td>\n      <td>3.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>virginica</td>\n      <td>6.588</td>\n      <td>3.8</td>\n    </tr>\n  </tbody>\n</table>'},ykMn:function(t,n){t.exports='<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>139</th>\n      <td>6.9</td>\n      <td>3.1</td>\n      <td>5.4</td>\n      <td>2.1</td>\n      <td>virginica</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>6.4</td>\n      <td>3.1</td>\n      <td>5.5</td>\n      <td>1.8</td>\n      <td>virginica</td>\n    </tr>\n    <tr>\n      <th>128</th>\n      <td>6.4</td>\n      <td>2.8</td>\n      <td>5.6</td>\n      <td>2.1</td>\n      <td>virginica</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>5.1</td>\n      <td>3.8</td>\n      <td>1.5</td>\n      <td>0.3</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>6.8</td>\n      <td>3.2</td>\n      <td>5.9</td>\n      <td>2.3</td>\n      <td>virginica</td>\n    </tr>\n  </tbody>\n</table>'}}]);
//# sourceMappingURL=component---src-pages-techniques-programming-pandas-verbs-groupby-js-f334637370e80d0ea144.js.map