{"version":3,"sources":["webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby4.html","webpack:///./src/pages/techniques/programming/pandas/verbs/groupby.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby5.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_groupby6.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_iris.html"],"names":["module","exports","GroupByVerb","props","render","name","note","href","className","iris","language","code","groupby2","groupby3","groupby4","groupby5","groupby6","Component"],"mappings":"6EAAAA,EAAOC,QAAU,09B,gNCsBXC,E,oBACJ,WAAYC,GAAQ,OAClB,YAAMA,IADW,K,0GAInBC,OAAA,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASC,KAAK,WACZ,kBAAC,IAAD,CACEC,KACE,uBAAGC,KAAK,wFAAR,yBAKF,0BAAMC,UAAU,QAAhB,WAPF,wEAQyC,IACvC,0BAAMA,UAAU,QAAhB,YATF,uFAYA,kBAAC,IAAD,KAAUC,KACV,kBAAC,IAAD,6KAKA,kBAAC,IAAD,CACEC,SAAS,SACTC,KAAI,kIASN,kBAAC,IAAD,CACEL,KACE,uBAAGC,KAAK,6DAAR,yBAFJ,0LAWA,kBAAC,IAAD,CAAYF,KAAK,2BACf,kBAAC,IAAD,sIAIA,kBAAC,IAAD,CACEK,SAAS,SACTC,KAAI,2EAQN,kBAAC,IAAD,KAAUC,KACV,kBAAC,IAAD,+OAMA,kBAAC,IAAD,CACEF,SAAS,SACTC,KAAI,6IAWN,kBAAC,IAAD,KAAUE,MAEZ,kBAAC,IAAD,CAAYR,KAAK,mCACf,kBAAC,IAAD,CACEC,KACE,uBAAGC,KAAK,qGAAR,yBAFJ,OAOM,0BAAMC,UAAU,QAAhB,aAPN,qMAU8C,IAC5C,uBAAGD,KAAK,gDAAR,WAAmE,IAXrE,8CAcA,kBAAC,IAAD,CACEG,SAAS,SACTC,KAAI,+JAWN,kBAAC,IAAD,KAAUG,KACV,kBAAC,IAAD,0PAMA,kBAAC,IAAD,CACEJ,SAAS,SACTC,KAAI,2OAeN,kBAAC,IAAD,KAAUI,KACV,kBAAC,IAAD,6RAQF,kBAAC,IAAD,CAAYV,KAAK,gCACf,kBAAC,IAAD,wMAGmE,IACjE,0BAAMG,UAAU,QAAhB,iBAJF,qDAK6B,IAC3B,0BAAMA,UAAU,QAAhB,kBANF,6BASA,kBAAC,IAAD,CACEE,SAAS,SACTC,KAAI,6JAWN,kBAAC,IAAD,KAAUK,KACV,kBAAC,IAAD,iK,GA3KcC,aAuLXf,a,mBC7MfF,EAAOC,QAAU,uxB,mBCAjBD,EAAOC,QAAU,qjB,mBCAjBD,EAAOC,QAAU,kjB,mBCAjBD,EAAOC,QAAU,ijB,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-techniques-programming-pandas-verbs-groupby-js-f334637370e80d0ea144.js","sourcesContent":["module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>sepal_length</th>\\n      <th>sepal_width</th>\\n      <th>petal_length</th>\\n      <th>petal_width</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>0.266674</td>\\n      <td>0.189941</td>\\n      <td>-0.357011</td>\\n      <td>-0.436492</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>-0.300718</td>\\n      <td>-1.129096</td>\\n      <td>-0.357011</td>\\n      <td>-0.436492</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>-0.868111</td>\\n      <td>-0.601481</td>\\n      <td>-0.932836</td>\\n      <td>-0.436492</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>-1.151807</td>\\n      <td>-0.865288</td>\\n      <td>0.218813</td>\\n      <td>-0.436492</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>-0.017022</td>\\n      <td>0.453749</td>\\n      <td>-0.357011</td>\\n      <td>-0.436492</td>\\n    </tr>\\n  </tbody>\\n</table>\"","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Section,\n  Subsection,\n  Subsubsection,\n  Figure,\n  Paragraph,\n  Code,\n  RawHTML,\n  Layout\n} from \"../../../../../components\";\n\n\nimport iris from \"raw-loader!./_iris.html\"\nimport groupby2 from \"raw-loader!./_groupby2.html\"\nimport groupby3 from \"raw-loader!./_groupby3.html\"\nimport groupby4 from \"raw-loader!./_groupby4.html\"\nimport groupby5 from \"raw-loader!./_groupby5.html\"\nimport groupby6 from \"raw-loader!./_groupby6.html\"\n\nclass GroupByVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Section name=\"groupby\">\n          <Paragraph\n            note={\n              <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html\">\n                pandas documentation\n              </a>\n            }\n          >\n            <span className=\"mono\">groupby</span> lets you perform aggregations\n            of your data. It is similar to the SQL{\" \"}\n            <span className=\"mono\">GROUP BY</span> operation. I'll use the iris\n            dataset to demonstrate, here's a sample of that data.\n          </Paragraph>\n          <RawHTML>{iris}</RawHTML>\n          <Paragraph>\n            Usually perform the grouping by passing in a list of columns that\n            you want to group by. Here I'll just group by a single column, but\n            you can easily add in multiple.\n          </Paragraph>\n          <Code\n            language=\"python\"\n            code={`\n(\n    df\n    .groupby(['species'])\n)\n\n# returns <pandas.core.groupby.DataFrameGroupBy object at 0x1065c37f0>\n        `}\n          />\n          <Paragraph\n            note={\n              <a href=\"https://pandas.pydata.org/pandas-docs/stable/groupby.html\">\n                pandas documentation\n              </a>\n            }\n          >\n            There is a good section in the pandas documentation about the\n            operations you can perform on a groupby object. I'm just going to\n            extract the bits that I use a lot and have to look up.\n          </Paragraph>\n          <Subsection name=\"Performing aggregations\">\n            <Paragraph>\n              Most frequently you want to aggregate up your group somehow. Here\n              I'll take the mean of all the numeric columns in my groups.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\n(\n    df\n    .groupby(['species'])\n    .agg(np.mean)\n)\n        `}\n            />\n            <RawHTML>{groupby2}</RawHTML>\n            <Paragraph>\n              You can also specify particular aggregation functions to different\n              columns in the group. You do this by passing in a dictionary to\n              the agg function. Here I'll take the mean of the sepal_length, and\n              take the max of the sepal_width.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\n(\n    df\n    .groupby(['species'])\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        `}\n            />\n            <RawHTML>{groupby3}</RawHTML>\n          </Subsection>\n          <Subsection name=\"Applying function to each group\">\n            <Paragraph\n              note={\n                <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html\">\n                  pandas documentation\n                </a>\n              }\n            >\n              The <span className=\"mono\">transform</span> function applies a\n              function over the group and returns a transformed version of that\n              group. The output has the same number of observations as go into\n              the function. I've used it to calculate the{\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Standard_score\">z-score</a>{\" \"}\n              of all the observations in the data frame.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\n(\n    df\n    .groupby(['species'])\n    .transform(\n        # formula for the z score\n        lambda x: (x - x.mean()) / x.std()\n    )\n)\n        `}\n            />\n            <RawHTML>{groupby4}</RawHTML>\n            <Paragraph>\n              To perform more complex aggregations, you usually want to write a\n              function that does that aggregation. It should return a dataframe,\n              a series, or scalar. The apply function will figure out how to\n              join them all back together into a dataframe.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\ndef summarise(x):\n    return pd.Series({\n        'sepal_length_max': x.sepal_length.max(),\n        'sepal_length_min': x.sepal_length.min()\n    })\n\n(\n    df\n    .groupby(['species'])\n    .apply(summarise)\n)\n\n        `}\n            />\n            <RawHTML>{groupby5}</RawHTML>\n            <Paragraph>\n              This is very flexible, but will be slower than the aggregate or\n              transform functions. Note that this will apply the function twice\n              to the first group. If you're applying a function with side\n              effects, for example writing results out to a file, you might get\n              unexpected results.\n            </Paragraph>\n          </Subsection>\n          <Subsection name=\"Grouping by without an index\">\n            <Paragraph>\n              When you do a group by, it creates an index on the output from the\n              columns you've grouped by. This can be fiddly for subsequent\n              operations that expect a plain dataframe. Either you can use the{\" \"}\n              <span className=\"mono\">reset_index()</span> function to remove the\n              index, or you can pass the{\" \"}\n              <span className=\"mono\">as_index=False</span> argument to the\n              groupby.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\n(\n    df\n    .groupby(['species'], as_index=False)\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        `}\n            />\n            <RawHTML>{groupby6}</RawHTML>\n            <Paragraph>\n              That looks pretty much the same as the grouping from above, but\n              note that the grouping column (species) doesn't appear in the\n              index column any more.\n            </Paragraph>\n          </Subsection>\n        </Section>\n      </Layout>\n    );\n  }\n}\n\nexport default GroupByVerb;\n","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>sepal_length</th>\\n      <th>sepal_width</th>\\n      <th>petal_length</th>\\n      <th>petal_width</th>\\n    </tr>\\n    <tr>\\n      <th>species</th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>setosa</th>\\n      <td>5.006</td>\\n      <td>3.428</td>\\n      <td>1.462</td>\\n      <td>0.246</td>\\n    </tr>\\n    <tr>\\n      <th>versicolor</th>\\n      <td>5.936</td>\\n      <td>2.770</td>\\n      <td>4.260</td>\\n      <td>1.326</td>\\n    </tr>\\n    <tr>\\n      <th>virginica</th>\\n      <td>6.588</td>\\n      <td>2.974</td>\\n      <td>5.552</td>\\n      <td>2.026</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>sepal_length_max</th>\\n      <th>sepal_length_min</th>\\n    </tr>\\n    <tr>\\n      <th>species</th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>setosa</th>\\n      <td>5.8</td>\\n      <td>4.3</td>\\n    </tr>\\n    <tr>\\n      <th>versicolor</th>\\n      <td>7.0</td>\\n      <td>4.9</td>\\n    </tr>\\n    <tr>\\n      <th>virginica</th>\\n      <td>7.9</td>\\n      <td>4.9</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>sepal_length</th>\\n      <th>sepal_width</th>\\n    </tr>\\n    <tr>\\n      <th>species</th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>setosa</th>\\n      <td>5.006</td>\\n      <td>4.4</td>\\n    </tr>\\n    <tr>\\n      <th>versicolor</th>\\n      <td>5.936</td>\\n      <td>3.4</td>\\n    </tr>\\n    <tr>\\n      <th>virginica</th>\\n      <td>6.588</td>\\n      <td>3.8</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>species</th>\\n      <th>sepal_length</th>\\n      <th>sepal_width</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>setosa</td>\\n      <td>5.006</td>\\n      <td>4.4</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>versicolor</td>\\n      <td>5.936</td>\\n      <td>3.4</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>virginica</td>\\n      <td>6.588</td>\\n      <td>3.8</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>sepal_length</th>\\n      <th>sepal_width</th>\\n      <th>petal_length</th>\\n      <th>petal_width</th>\\n      <th>species</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>139</th>\\n      <td>6.9</td>\\n      <td>3.1</td>\\n      <td>5.4</td>\\n      <td>2.1</td>\\n      <td>virginica</td>\\n    </tr>\\n    <tr>\\n      <th>137</th>\\n      <td>6.4</td>\\n      <td>3.1</td>\\n      <td>5.5</td>\\n      <td>1.8</td>\\n      <td>virginica</td>\\n    </tr>\\n    <tr>\\n      <th>128</th>\\n      <td>6.4</td>\\n      <td>2.8</td>\\n      <td>5.6</td>\\n      <td>2.1</td>\\n      <td>virginica</td>\\n    </tr>\\n    <tr>\\n      <th>19</th>\\n      <td>5.1</td>\\n      <td>3.8</td>\\n      <td>1.5</td>\\n      <td>0.3</td>\\n      <td>setosa</td>\\n    </tr>\\n    <tr>\\n      <th>143</th>\\n      <td>6.8</td>\\n      <td>3.2</td>\\n      <td>5.9</td>\\n      <td>2.3</td>\\n      <td>virginica</td>\\n    </tr>\\n  </tbody>\\n</table>\""],"sourceRoot":""}