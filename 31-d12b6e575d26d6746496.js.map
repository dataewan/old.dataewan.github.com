{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/rejoin.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/clip/rectangle.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/equalEarth.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/naturalEarth1.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo/src/index.js","webpack:///./node_modules/d3-path/src/path.js","webpack:///./node_modules/d3-shape/src/constant.js","webpack:///./node_modules/d3-shape/src/math.js","webpack:///./node_modules/d3-shape/src/arc.js","webpack:///./node_modules/d3-shape/src/curve/linear.js","webpack:///./node_modules/d3-shape/src/curve/radial.js","webpack:///./node_modules/d3-shape/src/array.js","webpack:///./node_modules/d3-shape/src/symbol/diamond.js","webpack:///./node_modules/d3-shape/src/symbol/circle.js","webpack:///./node_modules/d3-shape/src/symbol/star.js","webpack:///./node_modules/d3-shape/src/noop.js","webpack:///./node_modules/d3-shape/src/symbol/triangle.js","webpack:///./node_modules/d3-shape/src/symbol/wye.js","webpack:///./node_modules/d3-shape/src/curve/basis.js","webpack:///./node_modules/d3-shape/src/curve/basisClosed.js","webpack:///./node_modules/d3-shape/src/curve/basisOpen.js","webpack:///./node_modules/d3-shape/src/curve/bundle.js","webpack:///./node_modules/d3-shape/src/curve/cardinal.js","webpack:///./node_modules/d3-shape/src/curve/cardinalClosed.js","webpack:///./node_modules/d3-shape/src/curve/cardinalOpen.js","webpack:///./node_modules/d3-shape/src/curve/catmullRom.js","webpack:///./node_modules/d3-shape/src/curve/catmullRomClosed.js","webpack:///./node_modules/d3-shape/src/curve/catmullRomOpen.js","webpack:///./node_modules/d3-shape/src/curve/linearClosed.js","webpack:///./node_modules/d3-shape/src/curve/monotone.js","webpack:///./node_modules/d3-shape/src/curve/natural.js","webpack:///./node_modules/d3-shape/src/curve/step.js","webpack:///./node_modules/d3-shape/src/index.js","webpack:///./node_modules/d3-scale-chromatic/src/colors.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/category10.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Accent.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Dark2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Paired.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set3.js","webpack:///./node_modules/d3-scale-chromatic/src/ramp.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/BrBG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PRGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PiYG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PuOr.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdGy.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/Spectral.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","webpack:///./node_modules/d3-scale-chromatic/src/index.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/index.js"],"names":["$export","__webpack_require__","aFunction","toObject","fails","$sort","sort","test","P","F","undefined","comparefn","call","this","module","exports","method","arg","adder","Adder","reset","prototype","constructor","s","t","add","y","temp","valueOf","a","b","x","bv","av","epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","exp","ceil","log","floor","sin","pow","math_sign","sign","sqrt","tan","acos","asin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","n","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","src_stream","cartesian_spherical","cartesian","cartesian_cartesian","spherical","lambda","phi","cosPhi","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","k","cartesianNormalizeInPlace","d","l","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","z","circleStream","radius","delta","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","buffer","line","lines","push","rejoin","pop","concat","shift","result","pointEqual","Intersection","points","other","entry","o","e","v","p","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","rejoin_link","start","current","isSubject","array","sum","polygonContains","polygon","sinPhi","normal","angle","winding","m","ring","point0","lambda0","phi0","sinPhi0","cosPhi0","j","lambda1","sinPhi1","cosPhi1","point1","phi1","absDelta","antimeridian","arc","intersection","phiArc","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","Object","src","clip_compareIntersection","pointLine","clean","ringSegments","filter","validSegment","clip_antimeridian","NaN","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","u","w","uu","t2","q","polar","q1","code","r","c0","v0","v00","point2","c","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","clipMax","clipMin","clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","max","min","area_x00","area_y00","area_x0","area_y0","identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","Infinity","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","projection","projectionStream","contextStream","path","apply","arguments","transformer","methods","TransformStream","key","fit","fitBounds","clipExtent","scale","translate","fitExtent","extent","h","fitSize","size","fitWidth","width","fitHeight","height","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projectionMutator","projectAt","rotate","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","transformRotate","clipAngle","precision","conicProjection","parallels","conicEqualAreaRaw","sy0","forward","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","azimuthalRaw","cx","cy","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEquidistantRaw","mercatorRaw","equirectangularRaw","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","gnomonicRaw","naturalEarth1Raw","phi4","orthographicRaw","stereographicRaw","transverseMercatorRaw","__webpack_exports__","tauEpsilon","Path","_x0","_y0","_x1","_y1","quadraticCurveTo","bezierCurveTo","arcTo","x21","y21","x01","y01","l01_2","Error","x20","y20","l21_2","l20_2","l21","l01","t01","t21","ccw","cw","da","rect","toString","constant","math_epsilon","math_pi","math_tau","arcInnerRadius","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","cornerTangents","r1","rc","lo","ox","oy","x11","y11","x10","y10","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","src_arc","cornerRadius","padRadius","a01","a11","a10","da0","da1","ap","rp","rc0","rc1","oc","x3","y3","x32","y32","bx","by","kc","lc","Linear","areaStart","areaEnd","linear","curveRadial","Radial","curve","_curve","radial","Array","slice","kr","that","Basis","BasisClosed","_x2","_x3","_x4","_y2","_y3","_y4","BasisOpen","Bundle","beta","_basis","_beta","_x","_y","custom","bundle","cardinal_point","_k","Cardinal","tension","cardinal","CardinalClosed","_x5","_y5","CardinalOpen","catmullRom_point","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","CatmullRom","_alpha","x23","y23","catmullRom","CatmullRomClosed","CatmullRomOpen","LinearClosed","slope3","h0","h1","s0","s1","slope2","monotone_point","MonotoneX","MonotoneY","ReflectContext","Natural","controlPoints","_t0","create","px","py","i0","i1","Step","_t","colors","specifier","Set2","ramp","scheme","d3_interpolate","map","d3_color","viridis_ramp","range","src_transform","kx","ky","input","output","reverse","feature","topology","feature_feature","id","bbox","properties","feature_object","transformPoint","arcs"],"mappings":"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ESG,EAZE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAye,IAAMN,ICESG,EAZE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAye,IAAMN,ICESG,EAZE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAye,IAAMN,ICESG,EAZE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAye,IAAMN,ICESG,EAZE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAye,IAAMN,ICASG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,ICESG,EAVE,IAAApE,MAAA,GAAAla,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAye,IAAMN,YCRSra,OAAA0a,EAAA,GAAyB1a,OAAA4a,EAAA,EAAA5a,CAAS,UAAiBA,OAAA4a,EAAA,EAAA5a,EAAS,WCAzDA,OAAA0a,EAAA,EAAA1a,CAAyBA,OAAA4a,EAAA,EAAA5a,EAAS,aAAoBA,OAAA4a,EAAA,EAAA5a,CAAS,YAE/DA,OAAA0a,EAAA,EAAA1a,CAAyBA,OAAA4a,EAAA,EAAA5a,CAAS,aAAmBA,OAAA4a,EAAA,EAAA5a,CAAS,YAExEA,OAAA4a,EAAA,EAAA5a,GCLAA,OAAA4a,EAAA,EAAA5a,GACRzK,KAAAC,GACAD,KAAAC,GCFA,SAASqlB,EAAIC,GACb,IAAAnj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","file":"31-d12b6e575d26d6746496.js","sourcesContent":["'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import projection from \"./index\";\nimport {abs, epsilon} from \"../math\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export {default as geoArea} from \"./area\";\nexport {default as geoBounds} from \"./bounds\";\nexport {default as geoCentroid} from \"./centroid\";\nexport {default as geoCircle} from \"./circle\";\nexport {default as geoClipAntimeridian} from \"./clip/antimeridian\";\nexport {default as geoClipCircle} from \"./clip/circle\";\nexport {default as geoClipExtent} from \"./clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\nexport {default as geoClipRectangle} from \"./clip/rectangle\";\nexport {default as geoContains} from \"./contains\";\nexport {default as geoDistance} from \"./distance\";\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \"./graticule\";\nexport {default as geoInterpolate} from \"./interpolate\";\nexport {default as geoLength} from \"./length\";\nexport {default as geoPath} from \"./path/index\";\nexport {default as geoAlbers} from \"./projection/albers\";\nexport {default as geoAlbersUsa} from \"./projection/albersUsa\";\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \"./projection/azimuthalEqualArea\";\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \"./projection/azimuthalEquidistant\";\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \"./projection/conicConformal\";\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \"./projection/conicEqualArea\";\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \"./projection/conicEquidistant\";\nexport {default as geoEqualEarth, equalEarthRaw as geoEqualEarthRaw} from \"./projection/equalEarth\";\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \"./projection/equirectangular\";\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \"./projection/gnomonic\";\nexport {default as geoIdentity} from \"./projection/identity\";\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \"./projection/index\";\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \"./projection/mercator\";\nexport {default as geoNaturalEarth1, naturalEarth1Raw as geoNaturalEarth1Raw} from \"./projection/naturalEarth1\";\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \"./projection/orthographic\";\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \"./projection/stereographic\";\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \"./projection/transverseMercator\";\nexport {default as geoRotation} from \"./rotation\";\nexport {default as geoStream} from \"./stream\";\nexport {default as geoTransform} from \"./transform\";\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) {}\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export var abs = Math.abs;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var sin = Math.sin;\nexport var sqrt = Math.sqrt;\n\nexport var epsilon = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00);\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi) {\n          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n              ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","import curveLinear from \"./linear\";\n\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\n\nexport default function curveRadial(curve) {\n\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n\n  return radial;\n}\n","export var slice = Array.prototype.slice;\n","var tan30 = Math.sqrt(1 / 3),\n    tan30_2 = tan30 * 2;\n\nexport default {\n  draw: function(context, size) {\n    var y = Math.sqrt(size / tan30_2),\n        x = y * tan30;\n    context.moveTo(0, -y);\n    context.lineTo(x, 0);\n    context.lineTo(0, y);\n    context.lineTo(-x, 0);\n    context.closePath();\n  }\n};\n","import {pi, tau} from \"../math\";\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","import {pi, tau} from \"../math\";\n\nvar ka = 0.89081309152928522810,\n    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),\n    kx = Math.sin(tau / 10) * kr,\n    ky = -Math.cos(tau / 10) * kr;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size * ka),\n        x = kx * r,\n        y = ky * r;\n    context.moveTo(0, -r);\n    context.lineTo(x, y);\n    for (var i = 1; i < 5; ++i) {\n      var a = tau * i / 5,\n          c = Math.cos(a),\n          s = Math.sin(a);\n      context.lineTo(s * r, -c * r);\n      context.lineTo(c * x - s * y, s * x + c * y);\n    }\n    context.closePath();\n  }\n};\n","export default function() {}\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n  draw: function(context, size) {\n    var y = -Math.sqrt(size / (sqrt3 * 3));\n    context.moveTo(0, y * 2);\n    context.lineTo(-sqrt3 * y, -y);\n    context.lineTo(sqrt3 * y, -y);\n    context.closePath();\n  }\n};\n","var c = -0.5,\n    s = Math.sqrt(3) / 2,\n    k = 1 / Math.sqrt(12),\n    a = (k / 2 + 1) * 3;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / a),\n        x0 = r / 2,\n        y0 = r * k,\n        x1 = x0,\n        y1 = r * k + r,\n        x2 = -x1,\n        y2 = y1;\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n    context.closePath();\n  }\n};\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    (2 * that._x0 + that._x1) / 3,\n    (2 * that._y0 + that._y1) / 3,\n    (that._x0 + 2 * that._x1) / 3,\n    (that._y0 + 2 * that._y1) / 3,\n    (that._x0 + 4 * that._x1 + x) / 6,\n    (that._y0 + 4 * that._y1 + y) / 6\n  );\n}\n\nexport function Basis(context) {\n  this._context = context;\n}\n\nBasis.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 3: point(this, this._x1, this._y1); // proceed\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new Basis(context);\n}\n","import noop from \"../noop\";\nimport {point} from \"./basis\";\n\nfunction BasisClosed(context) {\n  this._context = context;\n}\n\nBasisClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x2, this._y2);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x2, this._y2);\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisClosed(context);\n}\n","import {point} from \"./basis\";\n\nfunction BasisOpen(context) {\n  this._context = context;\n}\n\nBasisOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisOpen(context);\n}\n","import {Basis} from \"./basis\";\n\nfunction Bundle(context, beta) {\n  this._basis = new Basis(context);\n  this._beta = beta;\n}\n\nBundle.prototype = {\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n    this._basis.lineStart();\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        j = x.length - 1;\n\n    if (j > 0) {\n      var x0 = x[0],\n          y0 = y[0],\n          dx = x[j] - x0,\n          dy = y[j] - y0,\n          i = -1,\n          t;\n\n      while (++i <= j) {\n        t = i / j;\n        this._basis.point(\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n        );\n      }\n    }\n\n    this._x = this._y = null;\n    this._basis.lineEnd();\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\nexport default (function custom(beta) {\n\n  function bundle(context) {\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n  }\n\n  bundle.beta = function(beta) {\n    return custom(+beta);\n  };\n\n  return bundle;\n})(0.85);\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import noop from \"../noop\";\nimport {point} from \"./cardinal\";\n\nexport function CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {point} from \"./cardinal\";\n\nexport function CardinalOpen(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalOpen(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {epsilon} from \"../math\";\nimport {Cardinal} from \"./cardinal\";\n\nexport function point(that, x, y) {\n  var x1 = that._x1,\n      y1 = that._y1,\n      x2 = that._x2,\n      y2 = that._y2;\n\n  if (that._l01_a > epsilon) {\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n  }\n\n  if (that._l23_a > epsilon) {\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n  }\n\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n}\n\nfunction CatmullRom(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRom.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: this.point(this._x2, this._y2); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalClosed} from \"./cardinalClosed\";\nimport noop from \"../noop\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomClosed(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalOpen} from \"./cardinalOpen\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomOpen(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import noop from \"../noop\";\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._point) this._context.closePath();\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);\n    else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nexport default function(context) {\n  return new LinearClosed(context);\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","export {default as arc} from \"./arc\";\nexport {default as area} from \"./area\";\nexport {default as line} from \"./line\";\nexport {default as pie} from \"./pie\";\nexport {default as areaRadial, default as radialArea} from \"./areaRadial\"; // Note: radialArea is deprecated!\nexport {default as lineRadial, default as radialLine} from \"./lineRadial\"; // Note: radialLine is deprecated!\nexport {default as pointRadial} from \"./pointRadial\";\nexport {linkHorizontal, linkVertical, linkRadial} from \"./link/index\";\n\nexport {default as symbol, symbols} from \"./symbol\";\nexport {default as symbolCircle} from \"./symbol/circle\";\nexport {default as symbolCross} from \"./symbol/cross\";\nexport {default as symbolDiamond} from \"./symbol/diamond\";\nexport {default as symbolSquare} from \"./symbol/square\";\nexport {default as symbolStar} from \"./symbol/star\";\nexport {default as symbolTriangle} from \"./symbol/triangle\";\nexport {default as symbolWye} from \"./symbol/wye\";\n\nexport {default as curveBasisClosed} from \"./curve/basisClosed\";\nexport {default as curveBasisOpen} from \"./curve/basisOpen\";\nexport {default as curveBasis} from \"./curve/basis\";\nexport {default as curveBundle} from \"./curve/bundle\";\nexport {default as curveCardinalClosed} from \"./curve/cardinalClosed\";\nexport {default as curveCardinalOpen} from \"./curve/cardinalOpen\";\nexport {default as curveCardinal} from \"./curve/cardinal\";\nexport {default as curveCatmullRomClosed} from \"./curve/catmullRomClosed\";\nexport {default as curveCatmullRomOpen} from \"./curve/catmullRomOpen\";\nexport {default as curveCatmullRom} from \"./curve/catmullRom\";\nexport {default as curveLinearClosed} from \"./curve/linearClosed\";\nexport {default as curveLinear} from \"./curve/linear\";\nexport {monotoneX as curveMonotoneX, monotoneY as curveMonotoneY} from \"./curve/monotone\";\nexport {default as curveNatural} from \"./curve/natural\";\nexport {default as curveStep, stepAfter as curveStepAfter, stepBefore as curveStepBefore} from \"./curve/step\";\n\nexport {default as stack} from \"./stack\";\nexport {default as stackOffsetExpand} from \"./offset/expand\";\nexport {default as stackOffsetDiverging} from \"./offset/diverging\";\nexport {default as stackOffsetNone} from \"./offset/none\";\nexport {default as stackOffsetSilhouette} from \"./offset/silhouette\";\nexport {default as stackOffsetWiggle} from \"./offset/wiggle\";\nexport {default as stackOrderAscending} from \"./order/ascending\";\nexport {default as stackOrderDescending} from \"./order/descending\";\nexport {default as stackOrderInsideOut} from \"./order/insideOut\";\nexport {default as stackOrderNone} from \"./order/none\";\nexport {default as stackOrderReverse} from \"./order/reverse\";\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default function(scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","import colors from \"../colors\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","export {default as schemeCategory10} from \"./categorical/category10\";\nexport {default as schemeAccent} from \"./categorical/Accent\";\nexport {default as schemeDark2} from \"./categorical/Dark2\";\nexport {default as schemePaired} from \"./categorical/Paired\";\nexport {default as schemePastel1} from \"./categorical/Pastel1\";\nexport {default as schemePastel2} from \"./categorical/Pastel2\";\nexport {default as schemeSet1} from \"./categorical/Set1\";\nexport {default as schemeSet2} from \"./categorical/Set2\";\nexport {default as schemeSet3} from \"./categorical/Set3\";\nexport {default as interpolateBrBG, scheme as schemeBrBG} from \"./diverging/BrBG\";\nexport {default as interpolatePRGn, scheme as schemePRGn} from \"./diverging/PRGn\";\nexport {default as interpolatePiYG, scheme as schemePiYG} from \"./diverging/PiYG\";\nexport {default as interpolatePuOr, scheme as schemePuOr} from \"./diverging/PuOr\";\nexport {default as interpolateRdBu, scheme as schemeRdBu} from \"./diverging/RdBu\";\nexport {default as interpolateRdGy, scheme as schemeRdGy} from \"./diverging/RdGy\";\nexport {default as interpolateRdYlBu, scheme as schemeRdYlBu} from \"./diverging/RdYlBu\";\nexport {default as interpolateRdYlGn, scheme as schemeRdYlGn} from \"./diverging/RdYlGn\";\nexport {default as interpolateSpectral, scheme as schemeSpectral} from \"./diverging/Spectral\";\nexport {default as interpolateBuGn, scheme as schemeBuGn} from \"./sequential-multi/BuGn\";\nexport {default as interpolateBuPu, scheme as schemeBuPu} from \"./sequential-multi/BuPu\";\nexport {default as interpolateGnBu, scheme as schemeGnBu} from \"./sequential-multi/GnBu\";\nexport {default as interpolateOrRd, scheme as schemeOrRd} from \"./sequential-multi/OrRd\";\nexport {default as interpolatePuBuGn, scheme as schemePuBuGn} from \"./sequential-multi/PuBuGn\";\nexport {default as interpolatePuBu, scheme as schemePuBu} from \"./sequential-multi/PuBu\";\nexport {default as interpolatePuRd, scheme as schemePuRd} from \"./sequential-multi/PuRd\";\nexport {default as interpolateRdPu, scheme as schemeRdPu} from \"./sequential-multi/RdPu\";\nexport {default as interpolateYlGnBu, scheme as schemeYlGnBu} from \"./sequential-multi/YlGnBu\";\nexport {default as interpolateYlGn, scheme as schemeYlGn} from \"./sequential-multi/YlGn\";\nexport {default as interpolateYlOrBr, scheme as schemeYlOrBr} from \"./sequential-multi/YlOrBr\";\nexport {default as interpolateYlOrRd, scheme as schemeYlOrRd} from \"./sequential-multi/YlOrRd\";\nexport {default as interpolateBlues, scheme as schemeBlues} from \"./sequential-single/Blues\";\nexport {default as interpolateGreens, scheme as schemeGreens} from \"./sequential-single/Greens\";\nexport {default as interpolateGreys, scheme as schemeGreys} from \"./sequential-single/Greys\";\nexport {default as interpolatePurples, scheme as schemePurples} from \"./sequential-single/Purples\";\nexport {default as interpolateReds, scheme as schemeReds} from \"./sequential-single/Reds\";\nexport {default as interpolateOranges, scheme as schemeOranges} from \"./sequential-single/Oranges\";\nexport {default as interpolateCubehelixDefault} from \"./sequential-multi/cubehelix\";\nexport {default as interpolateRainbow, warm as interpolateWarm, cool as interpolateCool} from \"./sequential-multi/rainbow\";\nexport {default as interpolateSinebow} from \"./sequential-multi/sinebow\";\nexport {default as interpolateViridis, magma as interpolateMagma, inferno as interpolateInferno, plasma as interpolatePlasma} from \"./sequential-multi/viridis\";\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export {default as bbox} from \"./src/bbox\";\nexport {default as feature} from \"./src/feature\";\nexport {default as mesh, meshArcs} from \"./src/mesh\";\nexport {default as merge, mergeArcs} from \"./src/merge\";\nexport {default as neighbors} from \"./src/neighbors\";\nexport {default as quantize} from \"./src/quantize\";\nexport {default as transform} from \"./src/transform\";\nexport {default as untransform} from \"./src/untransform\";\n"],"sourceRoot":""}