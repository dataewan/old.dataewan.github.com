webpackJsonp([29366768633658],{478:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>3.428</td> <td>1.462</td> <td>0.246</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>2.770</td> <td>4.260</td> <td>1.326</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>2.974</td> <td>5.552</td> <td>2.026</td> </tr> </tbody> </table>"},479:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>versicolor</th> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>virginica</th> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>"},480:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0.266674</td> <td>0.189941</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>1</th> <td>-0.300718</td> <td>-1.129096</td> <td>-0.357011</td> <td>-0.436492</td> </tr> <tr> <th>2</th> <td>-0.868111</td> <td>-0.601481</td> <td>-0.932836</td> <td>-0.436492</td> </tr> <tr> <th>3</th> <td>-1.151807</td> <td>-0.865288</td> <td>0.218813</td> <td>-0.436492</td> </tr> <tr> <th>4</th> <td>-0.017022</td> <td>0.453749</td> <td>-0.357011</td> <td>-0.436492</td> </tr> </tbody> </table>"},481:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length_max</th> <th>sepal_length_min</th> </tr> <tr> <th>species</th> <th></th> <th></th> </tr> </thead> <tbody> <tr> <th>setosa</th> <td>5.8</td> <td>4.3</td> </tr> <tr> <th>versicolor</th> <td>7.0</td> <td>4.9</td> </tr> <tr> <th>virginica</th> <td>7.9</td> <td>4.9</td> </tr> </tbody> </table>"},482:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>species</th> <th>sepal_length</th> <th>sepal_width</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>setosa</td> <td>5.006</td> <td>4.4</td> </tr> <tr> <th>1</th> <td>versicolor</td> <td>5.936</td> <td>3.4</td> </tr> <tr> <th>2</th> <td>virginica</td> <td>6.588</td> <td>3.8</td> </tr> </tbody> </table>"},483:function(t,e){t.exports="<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>sepal_length</th> <th>sepal_width</th> <th>petal_length</th> <th>petal_width</th> <th>species</th> </tr> </thead> <tbody> <tr> <th>139</th> <td>6.9</td> <td>3.1</td> <td>5.4</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>137</th> <td>6.4</td> <td>3.1</td> <td>5.5</td> <td>1.8</td> <td>virginica</td> </tr> <tr> <th>128</th> <td>6.4</td> <td>2.8</td> <td>5.6</td> <td>2.1</td> <td>virginica</td> </tr> <tr> <th>19</th> <td>5.1</td> <td>3.8</td> <td>1.5</td> <td>0.3</td> <td>setosa</td> </tr> <tr> <th>143</th> <td>6.8</td> <td>3.2</td> <td>5.9</td> <td>2.3</td> <td>virginica</td> </tr> </tbody> </table>"},310:function(t,e,a){(function(n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function d(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function h(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var l=a(1),s=(r(l),a(7)),i=(r(s),a(11)),p=function(t){function e(a){return o(this,e),d(this,t.call(this,a))}return h(e,t),e.prototype.render=function(){return n.createElement(i.Section,{name:"groupby"},n.createElement(i.Paragraph,{note:n.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html"},"pandas documentation")},n.createElement("span",{className:"mono"},"groupby")," lets you perform aggregations of your data. It is similar to the SQL ",n.createElement("span",{className:"mono"},"GROUP BY")," operation. I'll use the iris dataset to demonstrate, here's a sample of that data."),n.createElement(i.RawHTML,null,a(483)),n.createElement(i.Paragraph,null,"Usually perform the grouping by passing in a list of columns that you want to group by. Here I'll just group by a single column, but you can easily add in multiple."),n.createElement(i.Code,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n)\n\n# returns <pandas.core.groupby.DataFrameGroupBy object at 0x1065c37f0>\n        "}),n.createElement(i.Paragraph,{note:n.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/groupby.html"},"pandas documentation")},"There is a good section in the pandas documentation about the operations you can perform on a groupby object. I'm just going to extract the bits that I use a lot and have to look up."),n.createElement(i.Subsection,{name:"Performing aggregations"},n.createElement(i.Paragraph,null,"Most frequently you want to aggregate up your group somehow. Here I'll take the mean of all the numeric columns in my groups."),n.createElement(i.Code,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .agg(np.mean)\n)\n        "}),n.createElement(i.RawHTML,null,a(478)),n.createElement(i.Paragraph,null,"You can also specify particular aggregation functions to different columns in the group. You do this by passing in a dictionary to the agg function. Here I'll take the mean of the sepal_length, and take the max of the sepal_width."),n.createElement(i.Code,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        "}),n.createElement(i.RawHTML,null,a(479))),n.createElement(i.Subsection,{name:"Applying function to each group"},n.createElement(i.Paragraph,{note:n.createElement("a",{href:"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html"},"pandas documentation")},"The ",n.createElement("span",{className:"mono"},"transform")," function applies a function over the group and returns a transformed version of that group. The output has the same number of observations as go into the function. I've used it to calculate the ",n.createElement("a",{href:"https://en.wikipedia.org/wiki/Standard_score"},"z-score")," of all the observations in the data frame."),n.createElement(i.Code,{language:"python",code:"\n(\n    df\n    .groupby(['species'])\n    .transform(\n        # formula for the z score\n        lambda x: (x - x.mean()) / x.std()\n    )\n)\n        "}),n.createElement(i.RawHTML,null,a(480)),n.createElement(i.Paragraph,null,"To perform more complex aggregations, you usually want to write a function that does that aggregation. It should return a dataframe, a series, or scalar. The apply function will figure out how to join them all back together into a dataframe."),n.createElement(i.Code,{language:"python",code:"\ndef summarise(x):\n    return pd.Series({\n        'sepal_length_max': x.sepal_length.max(),\n        'sepal_length_min': x.sepal_length.min()\n    })\n\n(\n    df\n    .groupby(['species'])\n    .apply(summarise)\n)\n\n        "}),n.createElement(i.RawHTML,null,a(481)),n.createElement(i.Paragraph,null,"This is very flexible, but will be slower than the aggregate or transform functions. Note that this will apply the function twice to the first group. If you're applying a function with side effects, for example writing results out to a file, you might get unexpected results.")),n.createElement(i.Subsection,{name:"Grouping by without an index"},n.createElement(i.Paragraph,null,"When you do a group by, it creates an index on the output from the columns you've grouped by. This can be fiddly for subsequent operations that expect a plain dataframe. Either you can use the ",n.createElement("span",{className:"mono"},"reset_index()")," function to remove the index, or you can pass the ",n.createElement("span",{className:"mono"},"as_index=False")," argument to the groupby."),n.createElement(i.Code,{language:"python",code:"\n(\n    df\n    .groupby(['species'], as_index=False)\n    .agg({\n        'sepal_length': np.mean,\n        'sepal_width': np.max\n    })\n)\n        "}),n.createElement(i.RawHTML,null,a(482)),n.createElement(i.Paragraph,null,"That looks pretty much the same as the grouping from above, but note that the grouping column (species) doesn't appear in the index column any more.")))},e}(l.Component);e.default=p,t.exports=e.default}).call(e,a(4))}});
//# sourceMappingURL=component---src-pages-techniques-programming-pandas-verbs-groupby-js-750ab1ade2cb21abff7a.js.map