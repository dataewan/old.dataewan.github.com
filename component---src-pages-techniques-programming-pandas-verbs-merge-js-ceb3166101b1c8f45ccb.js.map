{"version":3,"sources":["webpack:///./src/pages/techniques/programming/pandas/verbs/merge.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_cast.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_merge1.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_crew.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_movies.html"],"names":["MergeVerb","props","render","name","note","href","className","caption","fullwidth","movies","cast","crew","language","code","merge1","merge2","merge3","Component","module","exports"],"mappings":"4QAqBMA,E,oBACJ,WAAYC,GAAQ,OAClB,YAAMA,IADW,K,0GAInBC,OAAA,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASC,KAAK,SACZ,kBAAC,IAAD,CACEC,KACE,uBAAGC,KAAK,sFAAR,yBAFJ,2BAO0B,0BAAMC,UAAU,QAAhB,QAP1B,iNAYA,kBAAC,IAAD,CACEF,KACE,uBAAGC,KAAK,qEAAR,8BAFJ,+GAQ2C,IACzC,0BAAMC,UAAU,QAAhB,UATF,IASwC,IACtC,0BAAMA,UAAU,QAAhB,QAVF,QAU0C,IACxC,0BAAMA,UAAU,QAAhB,QAXF,KAaA,kBAAC,IAAD,CAAQC,QAAQ,mBAAmBC,WAAW,GAC5C,kBAAC,IAAD,KAAUC,MAEZ,kBAAC,IAAD,CAAQF,QAAQ,iBAAiBC,WAAW,GAC1C,kBAAC,IAAD,KAAUE,MAEZ,kBAAC,IAAD,CAAQH,QAAQ,iBAAiBC,WAAW,GAC1C,kBAAC,IAAD,KAAUG,MAEZ,kBAAC,IAAD,8BACwB,0BAAML,UAAU,QAAhB,MADxB,oDAEqC,IACnC,0BAAMA,UAAU,QAAhB,YAHF,4CAMA,kBAAC,IAAD,CAAYH,KAAK,mBACf,kBAAC,IAAD,CACES,SAAS,SACTC,KAAI,wWAgBN,kBAAC,IAAD,KAAUC,KACV,kBAAC,IAAD,CAAeX,KAAK,6BAClB,kBAAC,IAAD,gHAE2C,IACzC,0BAAMG,UAAU,QAAhB,OAHF,4OASA,kBAAC,IAAD,CACEM,SAAS,SACTC,KAAI,ysBAoCN,kBAAC,IAAD,KAAUE,OAGd,kBAAC,IAAD,CAAYZ,KAAK,wBACf,kBAAC,IAAD,kGAEkC,IAChC,0BAAMG,UAAU,QAAhB,YAHF,yOASA,kBAAC,IAAD,CACEM,SAAS,SACTC,KAAI,2PAmBN,kBAAC,IAAD,0IAEoE,IAClE,uBAAGR,KAAK,oDAAR,oBAEK,IALP,wFASA,kBAAC,IAAD,CACEO,SAAS,SACTC,KAAI,oPAgBN,kBAAC,IAAD,KAAUG,KACV,kBAAC,IAAD,6P,GAnLYC,aAgMTjB,a,qBCrNfkB,EAAOC,QAAU,iiI,qBCAjBD,EAAOC,QAAU,gkB,qBCAjBD,EAAOC,QAAU,sgD,qBCAjBD,EAAOC,QAAU,68B,mBCAjBD,EAAOC,QAAU,w6C,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-techniques-programming-pandas-verbs-merge-js-ceb3166101b1c8f45ccb.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Section,\n  Subsection,\n  Subsubsection,\n  Figure,\n  Paragraph,\n  Code,\n  RawHTML,\n  Layout\n} from \"../../../../../components\";\n\nimport movies from \"raw-loader!./_movies.html\"\nimport cast from \"raw-loader!./_cast.html\"\nimport crew from \"raw-loader!./_crew.html\"\nimport merge1 from \"raw-loader!./_merge1.html\"\nimport merge2 from \"raw-loader!./_merge2.html\"\nimport merge3 from \"raw-loader!./_merge3.html\"\n\nclass MergeVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Section name=\"merge\">\n          <Paragraph\n            note={\n              <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html\">\n                pandas documentation\n              </a>\n            }\n          >\n            Merge is a lot like the <span className=\"mono\">JOIN</span> operation\n            in SQL. You use it to join together dataframe that contain a common\n            key. The common key is a column in each dataframe that you can use\n            to look up between the dataframes, some sort of identifier.\n          </Paragraph>\n          <Paragraph\n            note={\n              <a href=\"https://gist.github.com/dataewan/9e3eb3fee268b1eb4a629fd216e20712\">\n                where the data comes from\n              </a>\n            }\n          >\n            I'm going to use three dataframes for this that contain information\n            about movies. There are dataframes named{\" \"}\n            <span className=\"mono\">movies</span>,{\" \"}\n            <span className=\"mono\">cast</span>, and{\" \"}\n            <span className=\"mono\">crew</span>.\n          </Paragraph>\n          <Figure caption=\"Movies dataframe\" fullwidth={true}>\n            <RawHTML>{movies}</RawHTML>\n          </Figure>\n          <Figure caption=\"Cast dataframe\" fullwidth={true}>\n            <RawHTML>{cast}</RawHTML>\n          </Figure>\n          <Figure caption=\"Crew dataframe\" fullwidth={true}>\n            <RawHTML>{crew}</RawHTML>\n          </Figure>\n          <Paragraph>\n            Note that there is an <span className=\"mono\">id</span> column in the\n            movies dataframe. This matches the{\" \"}\n            <span className=\"mono\">movie_id</span> column in the cast and crew\n            dataframes.\n          </Paragraph>\n          <Subsection name=\"Joins in pandas\">\n            <Code\n              language=\"python\"\n              code={`\n(\n    # first a subquery to get all the Christopher Nolan directed films\n    crew\n    .query('job == \"Director\"')\n    .query('name == \"Christopher Nolan\"')\n    # now join with the movies and get their titles\n    .merge(\n        movies,\n        left_on='movie_id',\n        right_on='id'\n    )\n    [['title', 'release_date']]\n)\n          `}\n            />\n            <RawHTML>{merge1}</RawHTML>\n            <Subsubsection name=\"left, right, inner, outer\">\n              <Paragraph>\n                By default pandas does an inner join. This means that only rows\n                in both the dataframes are returned. The{\" \"}\n                <span className=\"mono\">how</span> parameter lets you do\n                different sorts of joins. This (slightly contrived) example\n                returns any years that either Susan Sarandon or Steven Spielberg\n                made a film. This is an outer join, because we want rows that\n                are present in either.\n              </Paragraph>\n              <Code\n                language=\"python\"\n                code={`\n# get all the susan sarandon movies\nsarandon = (\n    cast\n    .query('name == \"Susan Sarandon\"')\n    .merge(movies,\n           left_on='movie_id',\n           right_on='id')\n    [['name', 'title', 'year']]\n)\n\n# get all the steven spielberg movies\nspielberg = (\n    crew\n    .query('job == \"Director\"')\n    .query('name == \"Steven Spielberg\"')\n    .merge(movies,\n           left_on='movie_id',\n           right_on='id')\n    [['name', 'title', 'year']]\n)\n\n# perform the outer join\n(\n    sarandon\n    .merge(\n        spielberg,\n        how='outer',\n        on='year',\n    )\n    [['year', 'name_x', 'name_y']]\n    .drop_duplicates()\n    .sort_values('year')\n)\n            `}\n              />\n              <RawHTML>{merge2}</RawHTML>\n            </Subsubsection>\n          </Subsection>\n          <Subsection name=\"Checking your merges\">\n            <Paragraph>\n              A nice feature introduced in pandas 0.21 is the ability to\n              validate your merges, using the{\" \"}\n              <span className=\"mono\">validate</span> parameter. Sometimes you\n              know that there should be only one matching row in the dataframe\n              you're joining. For example, I thought there would only be one\n              director for each film. Putting in the validation told me that I\n              was wrong.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\ndirectors = (\n    crew\n    .query('job == \"Director\"')\n)\n\n(\n    movies\n    .merge(\n        directors,\n        left_on='id',\n        right_on='movie_id',\n        validate='1:1'\n    )\n)\n\n# This fails with a MergeError\n          `}\n            />\n            <Paragraph>\n              That code fails. Looking into the data a bit more, I see that my\n              assumption was incorrect. Some films have multiple directors, and{\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Paris,_je_t%27aime\">\n                Paris, je t'aime\n              </a>{\" \"}\n              has 21! I might have to put logic further along in my analysis to\n              catch these cases.\n            </Paragraph>\n            <Code\n              language=\"python\"\n              code={`\n(\n    (\n        movies\n        .merge(\n            directors,\n            left_on='id',\n            right_on='movie_id',\n        )\n    )\n    .groupby('title')\n    .agg({'name': 'count'})\n    .sort_values('name')\n)\n          `}\n            />\n            <RawHTML>{merge3}</RawHTML>\n            <Paragraph>\n              This is very useful if you are working with messy data, or if you\n              want to apply your code to new data in the future. It helps you\n              validate that your assumptions about the structure of the data are\n              correct. It makes your code more resilient.\n            </Paragraph>\n          </Subsection>\n        </Section>\n      </Layout>\n    );\n  }\n}\n\nexport default MergeVerb;\n","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>year</th>\\n      <th>name_x</th>\\n      <th>name_y</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>41</th>\\n      <td>1974.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>54</th>\\n      <td>1975.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>52</th>\\n      <td>1977.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>49</th>\\n      <td>1979.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>51</th>\\n      <td>1981.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>55</th>\\n      <td>1982.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>56</th>\\n      <td>1983.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>50</th>\\n      <td>1984.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>53</th>\\n      <td>1985.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>47</th>\\n      <td>1989.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>44</th>\\n      <td>1991.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>40</th>\\n      <td>1992.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>45</th>\\n      <td>1993.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>19</th>\\n      <td>1994.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>37</th>\\n      <td>1995.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>42</th>\\n      <td>1997.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>16</th>\\n      <td>1998.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>25</th>\\n      <td>1999.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>27</th>\\n      <td>2000.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>11</th>\\n      <td>2001.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>28</th>\\n      <td>2002.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>21</th>\\n      <td>2004.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>12</th>\\n      <td>2005.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>8</th>\\n      <td>2007.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>0</th>\\n      <td>2008.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>5</th>\\n      <td>2009.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>10</th>\\n      <td>2010.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>38</th>\\n      <td>2011.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2012.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>23</th>\\n      <td>2013.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>34</th>\\n      <td>2014.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>48</th>\\n      <td>2015.0</td>\\n      <td>NaN</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n    <tr>\\n      <th>18</th>\\n      <td>2016.0</td>\\n      <td>Susan Sarandon</td>\\n      <td>Steven Spielberg</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>name</th>\\n    </tr>\\n    <tr>\\n      <th>title</th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>Bambi</th>\\n      <td>7</td>\\n    </tr>\\n    <tr>\\n      <th>Fantasia 2000</th>\\n      <td>8</td>\\n    </tr>\\n    <tr>\\n      <th>Fantasia</th>\\n      <td>12</td>\\n    </tr>\\n    <tr>\\n      <th>Movie 43</th>\\n      <td>12</td>\\n    </tr>\\n    <tr>\\n      <th>Paris, je t'aime</th>\\n      <td>21</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>cast_id</th>\\n      <th>character</th>\\n      <th>credit_id</th>\\n      <th>gender</th>\\n      <th>id</th>\\n      <th>movie_id</th>\\n      <th>name</th>\\n      <th>order</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>242</td>\\n      <td>Jake Sully</td>\\n      <td>5602a8a7c3a3685532001c9a</td>\\n      <td>2</td>\\n      <td>65731</td>\\n      <td>19995</td>\\n      <td>Sam Worthington</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>3</td>\\n      <td>Neytiri</td>\\n      <td>52fe48009251416c750ac9cb</td>\\n      <td>1</td>\\n      <td>8691</td>\\n      <td>19995</td>\\n      <td>Zoe Saldana</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>25</td>\\n      <td>Dr. Grace Augustine</td>\\n      <td>52fe48009251416c750aca39</td>\\n      <td>1</td>\\n      <td>10205</td>\\n      <td>19995</td>\\n      <td>Sigourney Weaver</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>4</td>\\n      <td>Col. Quaritch</td>\\n      <td>52fe48009251416c750ac9cf</td>\\n      <td>2</td>\\n      <td>32747</td>\\n      <td>19995</td>\\n      <td>Stephen Lang</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>5</td>\\n      <td>Trudy Chacon</td>\\n      <td>52fe48009251416c750ac9d3</td>\\n      <td>1</td>\\n      <td>17647</td>\\n      <td>19995</td>\\n      <td>Michelle Rodriguez</td>\\n      <td>4</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>title</th>\\n      <th>release_date</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>The Dark Knight Rises</td>\\n      <td>2012-07-16</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>The Dark Knight</td>\\n      <td>2008-07-16</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>Interstellar</td>\\n      <td>2014-11-05</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>Inception</td>\\n      <td>2010-07-14</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>Batman Begins</td>\\n      <td>2005-06-10</td>\\n    </tr>\\n    <tr>\\n      <th>5</th>\\n      <td>Insomnia</td>\\n      <td>2002-05-24</td>\\n    </tr>\\n    <tr>\\n      <th>6</th>\\n      <td>The Prestige</td>\\n      <td>2006-10-19</td>\\n    </tr>\\n    <tr>\\n      <th>7</th>\\n      <td>Memento</td>\\n      <td>2000-10-11</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>credit_id</th>\\n      <th>department</th>\\n      <th>gender</th>\\n      <th>id</th>\\n      <th>job</th>\\n      <th>movie_id</th>\\n      <th>name</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>52fe48009251416c750aca23</td>\\n      <td>Editing</td>\\n      <td>0</td>\\n      <td>1721</td>\\n      <td>Editor</td>\\n      <td>19995</td>\\n      <td>Stephen E. Rivkin</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>539c47ecc3a36810e3001f87</td>\\n      <td>Art</td>\\n      <td>2</td>\\n      <td>496</td>\\n      <td>Production Design</td>\\n      <td>19995</td>\\n      <td>Rick Carter</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>54491c89c3a3680fb4001cf7</td>\\n      <td>Sound</td>\\n      <td>0</td>\\n      <td>900</td>\\n      <td>Sound Designer</td>\\n      <td>19995</td>\\n      <td>Christopher Boyes</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>54491cb70e0a267480001bd0</td>\\n      <td>Sound</td>\\n      <td>0</td>\\n      <td>900</td>\\n      <td>Supervising Sound Editor</td>\\n      <td>19995</td>\\n      <td>Christopher Boyes</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>539c4a4cc3a36810c9002101</td>\\n      <td>Production</td>\\n      <td>1</td>\\n      <td>1262</td>\\n      <td>Casting</td>\\n      <td>19995</td>\\n      <td>Mali Finn</td>\\n    </tr>\\n  </tbody>\\n</table>\"","module.exports = \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>budget</th>\\n      <th>id</th>\\n      <th>original_title</th>\\n      <th>overview</th>\\n      <th>popularity</th>\\n      <th>release_date</th>\\n      <th>runtime</th>\\n      <th>status</th>\\n      <th>tagline</th>\\n      <th>title</th>\\n      <th>vote_average</th>\\n      <th>vote_count</th>\\n      <th>year</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>237000000</td>\\n      <td>19995</td>\\n      <td>Avatar</td>\\n      <td>In the 22nd century, a paraplegic Marine is di...</td>\\n      <td>150.437577</td>\\n      <td>2009-12-10</td>\\n      <td>162.0</td>\\n      <td>Released</td>\\n      <td>Enter the World of Pandora.</td>\\n      <td>Avatar</td>\\n      <td>7.2</td>\\n      <td>11800</td>\\n      <td>2009.0</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>300000000</td>\\n      <td>285</td>\\n      <td>Pirates of the Caribbean: At World's End</td>\\n      <td>Captain Barbossa, long believed to be dead, ha...</td>\\n      <td>139.082615</td>\\n      <td>2007-05-19</td>\\n      <td>169.0</td>\\n      <td>Released</td>\\n      <td>At the end of the world, the adventure begins.</td>\\n      <td>Pirates of the Caribbean: At World's End</td>\\n      <td>6.9</td>\\n      <td>4500</td>\\n      <td>2007.0</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>245000000</td>\\n      <td>206647</td>\\n      <td>Spectre</td>\\n      <td>A cryptic message from Bond’s past sends him o...</td>\\n      <td>107.376788</td>\\n      <td>2015-10-26</td>\\n      <td>148.0</td>\\n      <td>Released</td>\\n      <td>A Plan No One Escapes</td>\\n      <td>Spectre</td>\\n      <td>6.3</td>\\n      <td>4466</td>\\n      <td>2015.0</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>250000000</td>\\n      <td>49026</td>\\n      <td>The Dark Knight Rises</td>\\n      <td>Following the death of District Attorney Harve...</td>\\n      <td>112.312950</td>\\n      <td>2012-07-16</td>\\n      <td>165.0</td>\\n      <td>Released</td>\\n      <td>The Legend Ends</td>\\n      <td>The Dark Knight Rises</td>\\n      <td>7.6</td>\\n      <td>9106</td>\\n      <td>2012.0</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>260000000</td>\\n      <td>49529</td>\\n      <td>John Carter</td>\\n      <td>John Carter is a war-weary, former military ca...</td>\\n      <td>43.926995</td>\\n      <td>2012-03-07</td>\\n      <td>132.0</td>\\n      <td>Released</td>\\n      <td>Lost in our world, found in another.</td>\\n      <td>John Carter</td>\\n      <td>6.1</td>\\n      <td>2124</td>\\n      <td>2012.0</td>\\n    </tr>\\n  </tbody>\\n</table>\""],"sourceRoot":""}