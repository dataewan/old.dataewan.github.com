{"version":3,"sources":["webpack:///component---src-pages-techniques-programming-pandas-verbs-query-js-2613b3e9a675a9b3ccc6.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_query1.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_query2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_query3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/query.js"],"names":["webpackJsonp","458","module","exports","459","460","283","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_propTypes","_components","QueryVerb","_Component","props","this","render","createElement","Section","name","Paragraph","note","href","className","Code","language","code","RawHTML","Subsection","Component"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA,g9CDSMC,IACA,SAAUF,EAAQC,GEVxBD,EAAAC,QAAA,48CFgBME,IACA,SAAUH,EAAQC,GGjBxBD,EAAAC,QAAA,g+CHuBMG,IACA,SAAUJ,EAAQC,EAASI,IAEJ,SAASC,GAAS,YAc9C,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAEvF,QAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAlBjepB,EAAQQ,YAAa,CI5BtB,IAAAuB,GAAA3B,EAAA,GACA4B,GJ+Be1B,EAAuByB,GI/BtC3B,EAAA,IAEA6B,GJiCmB3B,EAAuB0B,GIjC1C5B,EAAA,KAIM8B,EJyCW,SAAUC,GIxCzB,QAAAD,GAAYE,GAAO,MAAA1B,GAAA2B,KAAAH,GAAApB,EAAAuB,KACjBF,EAAAnB,KAAAqB,KAAMD,IJqIP,MA7FAlB,GAAUgB,EAAWC,GAQrBD,EAAUb,UI7CXiB,OJ6C8B,WI5C5B,MACIjC,GAAAkC,cAAAN,EAAAO,SAASC,KAAK,SACZpC,EAAAkC,cAAAN,EAAAS,WAAWC,KACTtC,EAAAkC,cAAA,KAAGK,KAAK,sFAAR,yBADF,2GAI2BvC,EAAAkC,cAAA,QAAMM,UAAU,QAAhB,SAJ3B,oGAQAxC,EAAAkC,cAAAN,EAAAa,MAAMC,SAAS,SAASC,KAAA,6GAO1B3C,EAAAkC,cAAAN,EAAAgB,QAAA,KACG7C,EAAQ,KAGXC,EAAAkC,cAAAN,EAAAiB,YAAYT,KAAK,gCACfpC,EAAAkC,cAAAN,EAAAS,UAAA,6KAIErC,EAAAkC,cAAAN,EAAAa,MAAMC,SAAS,SAASC,KAAA,qEAM1B3C,EAAAkC,cAAAN,EAAAgB,QAAA,KACG7C,EAAQ,OAIbC,EAAAkC,cAAAN,EAAAiB,YAAYT,KAAK,mCACfpC,EAAAkC,cAAAN,EAAAS,UAAA,wCACkCrC,EAAAkC,cAAA,QAAMM,UAAU,QAAhB,KADlC,QACsExC,EAAAkC,cAAA,QAAMM,UAAU,QAAhB,KADtE,oBAGExC,EAAAkC,cAAAN,EAAAa,MAAMC,SAAS,SAASC,KAAA,oHAO1B3C,EAAAkC,cAAAN,EAAAgB,QAAA,KACG7C,EAAQ,OAKbC,EAAAkC,cAAAN,EAAAiB,YAAYT,KAAK,uCACfpC,EAAAkC,cAAAN,EAAAS,UAAA,sIAKErC,EAAAkC,cAAAN,EAAAa,MAAMC,SAAS,SAASC,KAAA,+KAa1B3C,EAAAkC,cAAAN,EAAAgB,QAAA,KACG7C,EAAQ,SJuDX8B,GACPH,EAAOoB,UAETnD,GAAQS,QIjDMyB,EJkDdnC,EAAOC,QAAUA,EAAiB,UACLgB,KAAKhB,EAASI,EAAoB","file":"component---src-pages-techniques-programming-pandas-verbs-query-js-2613b3e9a675a9b3ccc6.js","sourcesContent":["webpackJsonp([264896191400237],{\n\n/***/ 458:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> <tr> <th>6</th> <td>0</td> <td>1</td> <td>male</td> <td>54.0</td> <td>0</td> <td>0</td> <td>51.8625</td> <td>S</td> <td>First</td> <td>man</td> <td>True</td> <td>E</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> <tr> <th>11</th> <td>1</td> <td>1</td> <td>female</td> <td>58.0</td> <td>0</td> <td>0</td> <td>26.5500</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 459:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>19</th> <td>1</td> <td>3</td> <td>female</td> <td>NaN</td> <td>0</td> <td>0</td> <td>7.2250</td> <td>C</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Cherbourg</td> <td>yes</td> <td>True</td> </tr> <tr> <th>26</th> <td>0</td> <td>3</td> <td>male</td> <td>NaN</td> <td>0</td> <td>0</td> <td>7.2250</td> <td>C</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Cherbourg</td> <td>no</td> <td>True</td> </tr> <tr> <th>30</th> <td>0</td> <td>1</td> <td>male</td> <td>40.0</td> <td>0</td> <td>0</td> <td>27.7208</td> <td>C</td> <td>First</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Cherbourg</td> <td>no</td> <td>True</td> </tr> <tr> <th>31</th> <td>1</td> <td>1</td> <td>female</td> <td>NaN</td> <td>1</td> <td>0</td> <td>146.5208</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>B</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 460:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>8</th> <td>1</td> <td>3</td> <td>female</td> <td>27.0</td> <td>0</td> <td>2</td> <td>11.1333</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>9</th> <td>1</td> <td>2</td> <td>female</td> <td>14.0</td> <td>1</td> <td>0</td> <td>30.0708</td> <td>C</td> <td>Second</td> <td>child</td> <td>False</td> <td>NaN</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(7);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _components = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar QueryVerb = function (_Component) {\n\t  _inherits(QueryVerb, _Component);\n\t\n\t  function QueryVerb(props) {\n\t    _classCallCheck(this, QueryVerb);\n\t\n\t    return _possibleConstructorReturn(this, _Component.call(this, props));\n\t  }\n\t\n\t  QueryVerb.prototype.render = function render() {\n\t    return Glamor.createElement(\n\t      _components.Section,\n\t      { name: 'query' },\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        'The query command is useful if you want to filter the rows of your data frame. It is similar to the SQL ',\n\t        Glamor.createElement(\n\t          'span',\n\t          { className: 'mono' },\n\t          'WHERE'\n\t        ),\n\t        ' statement. I\\'m going to use the titanic dataset from seaborn to illustrate. Here\\'s my raw data.'\n\t      ),\n\t      Glamor.createElement(_components.Code, { language: 'python', code: '\\nimport pandas as pd\\nimport seaborn as sns\\n\\ndf = sns.load_dataset(\\'titanic\\')\\ndf.head(5)\\n          ' }),\n\t      Glamor.createElement(\n\t        _components.RawHTML,\n\t        null,\n\t        __webpack_require__(54)\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Filter rows pandas dataframe' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'The simplest thing you can do with query is to use it to filter particular rows in the dataframe. Just pass a string through to the query function of the dataframe.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n  (\\n    df\\n    .query(\\'age > 30\\')\\n  ).head(5)\\n            ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(458)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'More complex logical statements' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'You can combine statements with ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            '|'\n\t          ),\n\t          ' and ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            '&'\n\t          ),\n\t          ' for OR and AND.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n  df\\n  .query(\\'(pclass == 3 | pclass == 1) & embark_town == \"Cherbourg\" \\')\\n  .head(5)\\n)\\n            ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(459)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Using variables in query statements' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'To use a variable in your query statement, prefix it with a @. This is often useful if you want to use a query in a function.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\ndef querySurvived(x, survived):\\n    return (\\n        x\\n        .query(\\'survived == @survived\\')\\n    )\\n\\n\\n(\\n    querySurvived(df, 1)\\n    .head(5)\\n)\\n            ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(460)\n\t        )\n\t      )\n\t    );\n\t  };\n\t\n\t  return QueryVerb;\n\t}(_react.Component);\n\t\n\texports.default = QueryVerb;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-techniques-programming-pandas-verbs-query-js-2613b3e9a675a9b3ccc6.js","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> <tr> <th>6</th> <td>0</td> <td>1</td> <td>male</td> <td>54.0</td> <td>0</td> <td>0</td> <td>51.8625</td> <td>S</td> <td>First</td> <td>man</td> <td>True</td> <td>E</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> <tr> <th>11</th> <td>1</td> <td>1</td> <td>female</td> <td>58.0</td> <td>0</td> <td>0</td> <td>26.5500</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_query1.html\n// module id = 458\n// module chunks = 264896191400237","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>19</th> <td>1</td> <td>3</td> <td>female</td> <td>NaN</td> <td>0</td> <td>0</td> <td>7.2250</td> <td>C</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Cherbourg</td> <td>yes</td> <td>True</td> </tr> <tr> <th>26</th> <td>0</td> <td>3</td> <td>male</td> <td>NaN</td> <td>0</td> <td>0</td> <td>7.2250</td> <td>C</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Cherbourg</td> <td>no</td> <td>True</td> </tr> <tr> <th>30</th> <td>0</td> <td>1</td> <td>male</td> <td>40.0</td> <td>0</td> <td>0</td> <td>27.7208</td> <td>C</td> <td>First</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Cherbourg</td> <td>no</td> <td>True</td> </tr> <tr> <th>31</th> <td>1</td> <td>1</td> <td>female</td> <td>NaN</td> <td>1</td> <td>0</td> <td>146.5208</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>B</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_query2.html\n// module id = 459\n// module chunks = 264896191400237","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>8</th> <td>1</td> <td>3</td> <td>female</td> <td>27.0</td> <td>0</td> <td>2</td> <td>11.1333</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>9</th> <td>1</td> <td>2</td> <td>female</td> <td>14.0</td> <td>1</td> <td>0</td> <td>30.0708</td> <td>C</td> <td>Second</td> <td>child</td> <td>False</td> <td>NaN</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_query3.html\n// module id = 460\n// module chunks = 264896191400237","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Section, Subsection, Paragraph, Code, RawHTML\n} from '../../../../../components';\n\nclass QueryVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <Section name='query'>\n          <Paragraph note={\n            <a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html'>pandas documentation</a> \n          }>\n            The query command is useful if you want to filter the rows of your data frame.\n            It is similar to the SQL <span className='mono'>WHERE</span> statement.\n            I'm going to use the titanic dataset from seaborn to illustrate.\n            Here's my raw data.\n          </Paragraph>\n          <Code language='python' code={`\nimport pandas as pd\nimport seaborn as sns\n\ndf = sns.load_dataset('titanic')\ndf.head(5)\n          `} />\n        <RawHTML>\n          {require('./_rawdata.html')}\n        </RawHTML>\n\n        <Subsection name='Filter rows pandas dataframe'>\n          <Paragraph>\n            The simplest thing you can do with query is to use it to filter particular rows in the dataframe.\n            Just pass a string through to the query function of the dataframe. \n          </Paragraph>\n            <Code language='python' code={`\n  (\n    df\n    .query('age > 30')\n  ).head(5)\n            `} />\n          <RawHTML>\n            {require('./_query1.html')}\n          </RawHTML>\n        </Subsection>\n\n        <Subsection name='More complex logical statements'>\n          <Paragraph>\n            You can combine statements with <span className='mono'>|</span> and <span className='mono'>&</span> for OR and AND.\n          </Paragraph>\n            <Code language='python' code={`\n(\n  df\n  .query('(pclass == 3 | pclass == 1) & embark_town == \"Cherbourg\" ')\n  .head(5)\n)\n            `} />\n          <RawHTML>\n            {require('./_query2.html')}\n          </RawHTML>\n        </Subsection>\n\n\n        <Subsection name='Using variables in query statements'>\n          <Paragraph>\n            To use a variable in your query statement,\n            prefix it with a @.\n            This is often useful if you want to use a query in a function.\n          </Paragraph>\n            <Code language='python' code={`\ndef querySurvived(x, survived):\n    return (\n        x\n        .query('survived == @survived')\n    )\n\n\n(\n    querySurvived(df, 1)\n    .head(5)\n)\n            `} />\n          <RawHTML>\n            {require('./_query3.html')}\n          </RawHTML>\n        </Subsection>\n      </Section>\n\n    );\n  }\n}\n\nexport default QueryVerb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/techniques/programming/pandas/verbs/query.js"],"sourceRoot":""}