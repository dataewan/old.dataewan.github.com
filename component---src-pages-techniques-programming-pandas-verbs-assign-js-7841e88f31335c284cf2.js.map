{"version":3,"sources":["webpack:///component---src-pages-techniques-programming-pandas-verbs-assign-js-7841e88f31335c284cf2.js","webpack:///./src/pages/techniques/programming/pandas/verbs/_assign1.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_assign2.html","webpack:///./src/pages/techniques/programming/pandas/verbs/_assign3.html","webpack:///./src/pages/techniques/programming/pandas/verbs/assign.js"],"names":["webpackJsonp","441","module","exports","442","443","278","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react","_propTypes","_components","AssignVerb","_Component","props","this","render","createElement","Section","name","Paragraph","note","href","Code","language","code","RawHTML","Subsection","className","Component"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA,yiDDSMC,IACA,SAAUF,EAAQC,GEVxBD,EAAAC,QAAA,k9CFgBME,IACA,SAAUH,EAAQC,GGjBxBD,EAAAC,QAAA,yoDHuBMG,IACA,SAAUJ,EAAQC,EAASI,IAEJ,SAASC,GAAS,YAc9C,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAEvF,QAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAlBjepB,EAAQQ,YAAa,CI5BtB,IAAAuB,GAAA3B,EAAA,GACA4B,GJ+Be1B,EAAuByB,GI/BtC3B,EAAA,IAEA6B,GJiCmB3B,EAAuB0B,GIjC1C5B,EAAA,KAIM8B,EJyCY,SAAUC,GIxC1B,QAAAD,GAAYE,GAAO,MAAA1B,GAAA2B,KAAAH,GAAApB,EAAAuB,KACjBF,EAAAnB,KAAAqB,KAAMD,IJyHP,MAjFAlB,GAAUgB,EAAYC,GAQtBD,EAAWb,UI7CZiB,OJ6C+B,WI5C7B,MACIjC,GAAAkC,cAAAN,EAAAO,SAASC,KAAK,UACZpC,EAAAkC,cAAAN,EAAAS,WAAWC,KACTtC,EAAAkC,cAAA,KAAGK,KAAK,uFAAR,yBADF,wJAOAvC,EAAAkC,cAAAN,EAAAY,MAAMC,SAAS,SAASC,KAAA,6GAO1B1C,EAAAkC,cAAAN,EAAAe,QAAA,KACG5C,EAAQ,KAEXC,EAAAkC,cAAAN,EAAAgB,YAAYR,KAAK,sBACfpC,EAAAkC,cAAAN,EAAAS,UAAA,gBACUrC,EAAAkC,cAAA,QAAMW,UAAU,QAAhB,UADV,kDAGA7C,EAAAkC,cAAAN,EAAAY,MAAMC,SAAS,SAASC,KAAA,0EAM1B1C,EAAAkC,cAAAN,EAAAe,QAAA,KACG5C,EAAQ,OAGXC,EAAAkC,cAAAN,EAAAgB,YAAYR,KAAK,iBACfpC,EAAAkC,cAAAN,EAAAS,UAAA,4GAIArC,EAAAkC,cAAAN,EAAAY,MAAMC,SAAS,SAASC,KAAA,8EAM1B1C,EAAAkC,cAAAN,EAAAe,QAAA,KACG5C,EAAQ,OAGXC,EAAAkC,cAAAN,EAAAgB,YAAYR,KAAK,oBACfpC,EAAAkC,cAAAN,EAAAS,UAAA,wFAGArC,EAAAkC,cAAAN,EAAAY,MAAMC,SAAS,SAASC,KAAA,6LAQ1B1C,EAAAkC,cAAAN,EAAAe,QAAA,KACG5C,EAAQ,SJwDT8B,GACPH,EAAOoB,UAETnD,GAAQS,QInDMyB,EJoDdnC,EAAOC,QAAUA,EAAiB,UACLgB,KAAKhB,EAASI,EAAoB","file":"component---src-pages-techniques-programming-pandas-verbs-assign-js-7841e88f31335c284cf2.js","sourcesContent":["webpackJsonp([213532663970930],{\n\n/***/ 441:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> <th>halfage</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> <td>11.0</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> <td>19.0</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> <td>13.0</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> <td>17.5</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> <td>17.5</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 442:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 443:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> <th>halfage</th> <th>fclass_male</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> <td>11.0</td> <td>False</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> <td>19.0</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> <td>13.0</td> <td>False</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> <td>17.5</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> <td>17.5</td> <td>False</td> </tr> </tbody> </table>\";\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(7);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tvar _components = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar AssignVerb = function (_Component) {\n\t  _inherits(AssignVerb, _Component);\n\t\n\t  function AssignVerb(props) {\n\t    _classCallCheck(this, AssignVerb);\n\t\n\t    return _possibleConstructorReturn(this, _Component.call(this, props));\n\t  }\n\t\n\t  AssignVerb.prototype.render = function render() {\n\t    return Glamor.createElement(\n\t      _components.Section,\n\t      { name: 'assign' },\n\t      Glamor.createElement(\n\t        _components.Paragraph,\n\t        { note: Glamor.createElement(\n\t            'a',\n\t            { href: 'https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html' },\n\t            'pandas documentation'\n\t          ) },\n\t        'Assign is used in pandas to make new columns in your dataframe. I\\'m going to use the titanic dataset from seaborn to illustrate. Here\\'s my raw data.'\n\t      ),\n\t      Glamor.createElement(_components.Code, { language: 'python', code: '\\nimport pandas as pd\\nimport seaborn as sns\\n\\ndf = sns.load_dataset(\\'titanic\\')\\ndf.head(5)\\n          ' }),\n\t      Glamor.createElement(\n\t        _components.RawHTML,\n\t        null,\n\t        __webpack_require__(54)\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Making new columns' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'Use the ',\n\t          Glamor.createElement(\n\t            'span',\n\t            { className: 'mono' },\n\t            'assign'\n\t          ),\n\t          ' verb to create new columns in your dataframe.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .assign(halfage = df.age / 2)\\n).head(5)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(441)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Cleaning data' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'You can overwrite data in an existing column. Useful if the data is messy and you want to clean it.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .assign(age = df.age.fillna(0.0))\\n).head(5)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(442)\n\t        )\n\t      ),\n\t      Glamor.createElement(\n\t        _components.Subsection,\n\t        { name: 'Multiple columns' },\n\t        Glamor.createElement(\n\t          _components.Paragraph,\n\t          null,\n\t          'You can assign to multiple columns by passing the columns as keyword arguments.'\n\t        ),\n\t        Glamor.createElement(_components.Code, { language: 'python', code: '\\n(\\n    df\\n    .assign(age = df.age.fillna(0.0),\\n            halfage = df.age / 2,\\n            fclass_male = (df[\\'class\\'] == \"First\") & (df.sex == \\'male\\'))\\n).head(5)\\n          ' }),\n\t        Glamor.createElement(\n\t          _components.RawHTML,\n\t          null,\n\t          __webpack_require__(443)\n\t        )\n\t      )\n\t    );\n\t  };\n\t\n\t  return AssignVerb;\n\t}(_react.Component);\n\t\n\texports.default = AssignVerb;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-techniques-programming-pandas-verbs-assign-js-7841e88f31335c284cf2.js","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> <th>halfage</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> <td>11.0</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> <td>19.0</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> <td>13.0</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> <td>17.5</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> <td>17.5</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_assign1.html\n// module id = 441\n// module chunks = 213532663970930","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_assign2.html\n// module id = 442\n// module chunks = 213532663970930","module.exports = \"<table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>survived</th> <th>pclass</th> <th>sex</th> <th>age</th> <th>sibsp</th> <th>parch</th> <th>fare</th> <th>embarked</th> <th>class</th> <th>who</th> <th>adult_male</th> <th>deck</th> <th>embark_town</th> <th>alive</th> <th>alone</th> <th>halfage</th> <th>fclass_male</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>0</td> <td>3</td> <td>male</td> <td>22.0</td> <td>1</td> <td>0</td> <td>7.2500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>False</td> <td>11.0</td> <td>False</td> </tr> <tr> <th>1</th> <td>1</td> <td>1</td> <td>female</td> <td>38.0</td> <td>1</td> <td>0</td> <td>71.2833</td> <td>C</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Cherbourg</td> <td>yes</td> <td>False</td> <td>19.0</td> <td>False</td> </tr> <tr> <th>2</th> <td>1</td> <td>3</td> <td>female</td> <td>26.0</td> <td>0</td> <td>0</td> <td>7.9250</td> <td>S</td> <td>Third</td> <td>woman</td> <td>False</td> <td>NaN</td> <td>Southampton</td> <td>yes</td> <td>True</td> <td>13.0</td> <td>False</td> </tr> <tr> <th>3</th> <td>1</td> <td>1</td> <td>female</td> <td>35.0</td> <td>1</td> <td>0</td> <td>53.1000</td> <td>S</td> <td>First</td> <td>woman</td> <td>False</td> <td>C</td> <td>Southampton</td> <td>yes</td> <td>False</td> <td>17.5</td> <td>False</td> </tr> <tr> <th>4</th> <td>0</td> <td>3</td> <td>male</td> <td>35.0</td> <td>0</td> <td>0</td> <td>8.0500</td> <td>S</td> <td>Third</td> <td>man</td> <td>True</td> <td>NaN</td> <td>Southampton</td> <td>no</td> <td>True</td> <td>17.5</td> <td>False</td> </tr> </tbody> </table>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/techniques/programming/pandas/verbs/_assign3.html\n// module id = 443\n// module chunks = 213532663970930","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Section, Subsection, Paragraph, Code, RawHTML\n} from '../../../../../components';\n\nclass AssignVerb extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <Section name='assign'>\n          <Paragraph note={\n            <a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html'>pandas documentation</a> \n          }>\n            Assign is used in pandas to make new columns in your dataframe.\n            I'm going to use the titanic dataset from seaborn to illustrate.\n            Here's my raw data.\n          </Paragraph>\n          <Code language='python' code={`\nimport pandas as pd\nimport seaborn as sns\n\ndf = sns.load_dataset('titanic')\ndf.head(5)\n          `} />\n        <RawHTML>\n          {require('./_rawdata.html')}\n        </RawHTML>\n        <Subsection name='Making new columns'>\n          <Paragraph>\n            Use the <span className=\"mono\">assign</span> verb to create new columns in your dataframe.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    df\n    .assign(halfage = df.age / 2)\n).head(5)\n          `} />\n        <RawHTML>\n          {require('./_assign1.html')}\n        </RawHTML>\n        </Subsection>\n        <Subsection name='Cleaning data'>\n          <Paragraph>\n            You can overwrite data in an existing column.\n            Useful if the data is messy and you want to clean it.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    df\n    .assign(age = df.age.fillna(0.0))\n).head(5)\n          `} />\n        <RawHTML>\n          {require('./_assign2.html')}\n        </RawHTML>\n        </Subsection>\n        <Subsection name='Multiple columns'>\n          <Paragraph>\n            You can assign to multiple columns by passing the columns as keyword arguments.\n          </Paragraph>\n          <Code language='python' code={`\n(\n    df\n    .assign(age = df.age.fillna(0.0),\n            halfage = df.age / 2,\n            fclass_male = (df['class'] == \"First\") & (df.sex == 'male'))\n).head(5)\n          `} />\n        <RawHTML>\n          {require('./_assign3.html')}\n        </RawHTML>\n        </Subsection>\n      </Section>\n    );\n  }\n}\n\nexport default AssignVerb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/techniques/programming/pandas/verbs/assign.js"],"sourceRoot":""}